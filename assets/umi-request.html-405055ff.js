import{_ as t,r as p,o,c,a as n,b as s,d as e,e as i}from"./app-4d1d3ef4.js";const l="/vuepress_blog/assets/umi-request-middleware-e7545b77.jpg",u={},r={id:"umi-request",tabindex:"-1"},d=n("a",{class:"header-anchor",href:"#umi-request","aria-hidden":"true"},"#",-1),k={href:"https://github.com/umijs/umi-request",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"The network request library, based on fetch encapsulation, combines the features of fetch and axios to provide developers with a unified api call method, simplifying usage, and providing common functions such as caching, timeout, character encoding processing, and error handling.",-1),v=n("h2",{id:"插件机制",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#插件机制","aria-hidden":"true"},"#"),s(" 插件机制")],-1),h=n("code",null,"onion.js",-1),b={href:"https://github.com/koajs/koa",target:"_blank",rel:"noopener noreferrer"},w={href:"https://github.com/koajs/compose",target:"_blank",rel:"noopener noreferrer"},f=i(`<h3 id="用户自定义中间件" tabindex="-1"><a class="header-anchor" href="#用户自定义中间件" aria-hidden="true">#</a> 用户自定义中间件</h3><ul><li>ctx(Object)：context, content request and response</li><li>next(Function)：function to call the next middleware</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">ctx<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;a2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>中间件执行顺序从左到右，首先执行自定义中间件，在依次执行 <strong>simplePost</strong>(对请求body，即data做处理),<strong>simpleGet</strong>(对请求params做处理，实现 query 简化、 post 简化)， <strong>parseResponseMiddleware</strong>(解析json,gbk数据)，最后执行 <strong>fetchMiddleware</strong> ,最终发送http请求.</p><p>这里会有疑惑，为什么不是先发送请求，再 <strong>parseResponse</strong>, 其实在 <code>parseResponseMiddleware</code> 中直接先掉用了 <code>next()</code>,即先执行了 <code>fetchMiddleware</code>,实际的 parse response 过程还是在http请求结果返回值后执行的</p><p>这里用户定义的中间件默认为 <code>this.middlewares</code>, <code>this.defaultMiddlewares</code>默认为 <code>[]</code>,<code>Onion.globalMiddlewares</code>和<code>Onion.coreMiddlewares</code>如下</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> globalMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>simplePost<span class="token punctuation">,</span> simpleGet<span class="token punctuation">,</span> parseResponseMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> coreMiddlewares <span class="token operator">=</span> <span class="token punctuation">[</span>fetchMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token parameter">params <span class="token operator">=</span> <span class="token keyword">null</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>middlewares<span class="token punctuation">,</span>
        <span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultMiddlewares<span class="token punctuation">,</span>
        <span class="token operator">...</span>Onion<span class="token punctuation">.</span>globalMiddlewares<span class="token punctuation">,</span>
        <span class="token operator">...</span>Onion<span class="token punctuation">.</span>coreMiddlewares<span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="compose-函数" tabindex="-1"><a class="header-anchor" href="#compose-函数" aria-hidden="true">#</a> compose 函数</h3><p>compose 函数返回一个组合了所有插件的“插件”函数，这个函数接受一个http请求的request 对象作为参数，参数被compose从一个个中间件中处理后返回的 promise</p><p>闭包函数 dispatch 作为调度函数，每次执行 <code>next()</code>,即会调用 dispatch 函数执行下一个中间件，当下一个中间件函数 <strong>return</strong> 时，上一个函数才能继续执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter">middlewares</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Middlewares must be an array!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> middlewaresLen <span class="token operator">=</span> middlewares<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> middlewaresLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Middleware must be componsed of function&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">wrapMiddlewares</span><span class="token punctuation">(</span><span class="token parameter">params<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">function</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token parameter">i</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;next() should not be called multiple times in one middleware!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            index <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token keyword">const</span> fn <span class="token operator">=</span> middlewares<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> next<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">fn</span><span class="token punctuation">(</span>params<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dispatch</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用栈分析</p><p><img src="`+l+'" alt="调用栈分析"></p><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>',15),g={href:"https://juejin.cn/post/6890259747866411022#heading-4",target:"_blank",rel:"noopener noreferrer"},y={href:"https://mostly-adequate.gitbook.io/mostly-adequate-guide/appendix_a#compose",target:"_blank",rel:"noopener noreferrer"};function _(x,j){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("h1",r,[d,s(),n("a",k,[s("umi-request"),e(a)])]),m,v,n("p",null,[s("umi-request 基于插件实现，内部的洋葱模型 "),h,s(" 参考自 "),n("a",b,[s("koa"),e(a)]),s(" 的 "),n("a",w,[s("koa-compose"),e(a)])]),f,n("ul",null,[n("li",null,[n("a",g,[s("如何更好地理解中间件和洋葱模型"),e(a)])]),n("li",null,[n("a",y,[s("compose函数,js-fp"),e(a)])])])])}const q=t(u,[["render",_],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/library/umi-request.html.vue"]]);export{q as default};
