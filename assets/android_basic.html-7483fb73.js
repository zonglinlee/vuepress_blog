import{_ as o,r as p,o as c,c as l,a as n,b as a,d as t,e}from"./app-4d1d3ef4.js";const i="/vuepress_blog/assets/android_actionbar_toolbar-7d0f8ed8.png",u={},r=n("p",null,[n("code",null,"AndroidX"),a(" 是谷歌在 2018 I/O 大会上推出的用于替换"),n("code",null,"android.support.library"),a("的 Android 扩展库，按照官方文档说明，"),n("code",null,"android.support.library"),a("在 Android 28版本之后就不再更新，未来的版本更新都在 AndroidX 中进行。不仅如此，AAC（Android Architecture Components架构缩写）中的组件也被 合并到AndroidX中，所以在使用JetPack组件时经常会看到AndroidX相关的包。")],-1),d=n("p",null,"androidx 命名空间包含 Android Jetpack 库。与支持库一样，androidx 命名空间中的库与 Android 平台分开提供，并向后兼容各个 Android 版本。",-1),k=n("h2",{id:"名词解释",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#名词解释","aria-hidden":"true"},"#"),a(" 名词解释")],-1),v=e("<li><p>重新生成整个屏幕所面临的一个难题是，在时间、计算能力和电池用量方面可能成本高昂。为了减少在这方面耗费的资源，Compose 会智能地选择在任何给定时间需要重新绘制界面的哪些部分</p></li><li><p>@Composable 注释。所有可组合函数都必须带有此注释；此注释可告知 Compose 编译器：此函数旨在将数据转换为界面</p></li><li><p>To display a scrollable column we use a <code>LazyColumn</code>. <code>LazyColumn</code> renders only the visible items on screen, allowing performance gains when rendering a big list.<code>LazyColumn</code> and <code>LazyRow</code> are equivalent to <code>RecyclerView</code> in Android Views.</p></li><li><p>The spring-based animation:spring spec does not take any time-related parameters. Instead it relies on physical properties (damping and stiffness) to make animations more natural.</p></li>",4),m={href:"https://developer.android.com/topic/libraries/architecture/livedata?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},g=n("code",null,"LiveData",-1),b={href:"https://blog.csdn.net/JMW1407/article/details/125714708",target:"_blank",rel:"noopener noreferrer"},h=n("strong",null,"单个Activity嵌套多个Fragment的UI",-1),_=n("li",null,[n("p",null,[n("code",null,"Fragment"),a(" 表示应用界面中可重复使用的一部分。fragment 定义和管理自己的布局，具有自己的生命周期，并且可以处理自己的输入事件。fragment 不能独立存在。它们必须由 activity 或其他 fragment 托管。fragment 的视图层次结构会成为宿主的视图层次结构的一部分，或附加到宿主的视图层次结构。")])],-1),q=n("h2",{id:"开发须知",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开发须知","aria-hidden":"true"},"#"),a(" 开发须知")],-1),y={id:"activity-中使用视图绑定",tabindex:"-1"},f=n("a",{class:"header-anchor",href:"#activity-中使用视图绑定","aria-hidden":"true"},"#",-1),x={href:"https://developer.android.com/topic/libraries/view-binding?hl=zh-cn#usage",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>为某个模块启用视图绑定功能后，系统会为该模块中包含的每个 <strong>XML</strong> 布局文件生成一个<strong>绑定类</strong>。每个绑定类均包含对根视图以及具有 ID 的所有视图的引用。系统会通过以下方式生成绑定类的名称：将 <strong>XML</strong> 文件的名称转换为驼峰式大小写，并在末尾添加“<strong>Binding</strong>”一词。</p><p>假设某个布局文件的名称为 <code>main_activity_layout.xml</code>, 则所生成的绑定类的名称就为 <code>MainActivityLayoutBinding</code>,此类具有两个字段：一个是名为 <code>name</code> 的 <code>TextView</code> ，另一个是名为 <code>button</code> 的 <code>Button</code>。该布局中的 <code>ImageView</code> 没有 <code>ID</code>，因此绑定类中不存在对它的引用。每个绑定类还包含一个 <code>getRoot()</code> 方法，用于为相应布局文件的根视图提供直接引用。在此示例中，<code>MainActivityLayoutBinding</code> 类中的 <code>getRoot()</code> 方法会返回 <code>LinearLayout</code> 根视图</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/name<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span> <span class="token attr-name"><span class="token namespace">android:</span>cropToPadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@+id/button<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@drawable/rounded_button<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与使用 <code>findViewById</code> 相比,<code>Null</code> 安全;类型安全：每个绑定类中的字段均具有与它们在 <code>XML</code> 文件中引用的视图相匹配的类型</p>`,4),A={id:"数据绑定库",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#数据绑定库","aria-hidden":"true"},"#",-1),V={href:"https://developer.android.com/topic/libraries/data-binding?hl=zh-cn#using_the_data_binding_library",target:"_blank",rel:"noopener noreferrer"},N=e(`<p>数据绑定库是一种支持库，借助该库，您可以使用声明性格式（而非程序化地）将布局中的界面组件绑定到应用中的数据源, 类似前端 vue 的双向数据绑定，引入 <code>observable data objects</code>(类似 vue 的 ref) 。数据绑定布局文件略有不同，以根标记 <code>layout</code> 开头，后跟 <code>data</code> 元素和 <code>view</code> 根元素。</p><p>普通界面元素内容赋值方法(操作 Dom)</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// 给 TextView 元素赋值</span>
findViewById<span class="token operator">&lt;</span>TextView<span class="token operator">&gt;</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>sample_text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
  text <span class="token operator">=</span> viewModel<span class="token punctuation">.</span>userName
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据绑定方式</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://schemas.android.com/apk/res/android<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.example.User<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>
            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>vertical<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span>
            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>match_parent<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{user.firstName}<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span> <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>wrap_content<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{user.lastName}<span class="token punctuation">&quot;</span></span>
                  <span class="token attr-name"><span class="token namespace">android:</span>onClick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>@{handlers::onClickFriend}<span class="token punctuation">&quot;</span></span>
        <span class="token punctuation">/&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),I={id:"使用可观察的数据对象",tabindex:"-1"},F=n("a",{class:"header-anchor",href:"#使用可观察的数据对象","aria-hidden":"true"},"#",-1),C={href:"https://developer.android.com/topic/libraries/data-binding/observability?hl=zh-cn",target:"_blank",rel:"noopener noreferrer"},T=e(`<p>当其中一个可观察数据对象绑定到界面并且该数据对象的属性发生更改时，界面会自动更新, 您可以使用通用 <code>Observable</code> 类和以下特定于基元的类，将字段设为可观察字段</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">class</span> User <span class="token punctuation">{</span>
        <span class="token keyword">val</span> firstName <span class="token operator">=</span> ObservableField<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> lastName <span class="token operator">=</span> ObservableField<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> age <span class="token operator">=</span> <span class="token function">ObservableInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
     ObservableArrayMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Any<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;firstName&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Google&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;lastName&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;Inc.&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;age&quot;</span></span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="android-navigation" tabindex="-1"><a class="header-anchor" href="#android-navigation" aria-hidden="true">#</a> android navigation</h3><p>没有同时包含抽屉式导航栏和底部导航栏的布局，这是因为 Material Design 指南不允许出现这种情况。 <img src="`+i+'" alt="android_actionbar_toolbar"></p>',4);function B(M,z){const s=p("ExternalLinkIcon");return c(),l("div",null,[r,d,k,n("ul",null,[v,n("li",null,[n("p",null,[n("a",m,[a("LiveData"),t(s)]),a(" 是一种可观察的数据存储器类。与常规的可观察类不同，"),g,a(" 具有生命周期感知能力，意指它遵循其他应用组件（如 activity、fragment 或 service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者")])]),n("li",null,[n("p",null,[n("a",b,[a("Android Navigation"),t(s)]),a(":传统的应用开发，一般都是采用一个界面一个 Activity 的形式，但是大家都知道， Activity 在 Android 中是属于重量级的组件，从而导致程序资源消耗大，用户体验不佳。而导航组件 Navigation 采用的是 Fragment 轻量级的组件实现的，可以节省资源，提高用户体验。 采用"),h,a("架构模式，已经被大多数的Android工程师所接受，需要通过FragmentManager和FragmentTransaction来管理Fragment之间的切换。 在Android中，页面的切换和管理包括应用程序Appbar的管理、Fragment的动画切换以及Fragment之间的参数传递等内容。并且，纯代码的方式使用起来不是特别友好，并且Appbar在管理和使用的过程中显得很混乱。因此，Jetpack提供了一个名为Navigation的组件，旨在方便开发者管理Fragment页面和Appbar。")])]),_]),q,n("h3",y,[f,a(),n("a",x,[a("Activity 中使用视图绑定"),t(s)])]),w,n("h3",A,[L,a(),n("a",V,[a("数据绑定库"),t(s)])]),N,n("h3",I,[F,a(),n("a",C,[a("使用可观察的数据对象"),t(s)])]),T])}const X=o(u,[["render",B],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/android/android_basic.html.vue"]]);export{X as default};
