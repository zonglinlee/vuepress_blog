import{_ as t,r as o,o as l,c,a as n,b as s,d as e,e as p}from"./app-4d1d3ef4.js";const i={},r=n("h2",{id:"知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知识点","aria-hidden":"true"},"#"),s(" 知识点")],-1),d=n("ul",null,[n("li",null,[s("mysql 中 "),n("code",null,"+"),s(" 的作用：只有一个作用，就是用作运算符 "),n("ul",null,[n("li",null,"两个操作数都为数值型，则进行加法运算"),n("li",null,"一方为字符型，则试图将字符型转换成数值型，如果转换成功，则进行加法运算；如果转换失败，则将字符型转换成数值 0 ，继续进行加法运算"),n("li",null,"只要其中一方为 null， 则结果肯定为 null")])])],-1),u={id:"mysql-索引失效",tabindex:"-1"},k=n("a",{class:"header-anchor",href:"#mysql-索引失效","aria-hidden":"true"},"#",-1),h={href:"https://segmentfault.com/a/1190000021464570",target:"_blank",rel:"noopener noreferrer"},v={id:"mysql-内置函数",tabindex:"-1"},_=n("a",{class:"header-anchor",href:"#mysql-内置函数","aria-hidden":"true"},"#",-1),m={href:"https://dev.mysql.com/doc/refman/5.7/en/built-in-function-reference.html",target:"_blank",rel:"noopener noreferrer"},b=p(`<ul><li><code>CAST</code>: Cast a value as a certain type <code>CAST(123456 as CHAR)</code></li><li><code>CONVERT</code>: Cast a value as a certain type <code>CONVERT(123456, CHAR)</code></li><li><code>JSON_CONTAINS(target, candidate[, path])</code>: Whether JSON document contains specific object at path</li><li><code>HEX()</code>: Hexadecimal representation of decimal or string value</li><li><code>AES_ENCRYPT(str,key_str)</code>: Encrypt using AES</li><li><code>AES_DECRYPT(crypt_str,key_str)</code>: Decrypt using AES</li><li><code>GROUP_CONCAT()</code>: Return a concatenated string</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 以下 GROUP_CONCAT 查询会得到： A;B;C</span>
<span class="token keyword">USE</span> testdb<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t <span class="token punctuation">(</span>
    v <span class="token keyword">CHAR</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t<span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;C&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;B&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> 
    GROUP_CONCAT<span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> v <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> v <span class="token keyword">ASC</span> SEPARATOR <span class="token string">&#39;;&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span>
    t<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SET</span> <span class="token variable">@j</span> <span class="token operator">=</span> <span class="token string">&#39;{&quot;a&quot;: 1, &quot;b&quot;: 2, &quot;c&quot;: {&quot;d&quot;: 4}}&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SET</span> <span class="token variable">@j2</span> <span class="token operator">=</span> <span class="token string">&#39;1&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> JSON_CONTAINS<span class="token punctuation">(</span><span class="token variable">@j</span><span class="token punctuation">,</span> <span class="token variable">@j2</span><span class="token punctuation">,</span> <span class="token string">&#39;$.a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,4),y={href:"https://en.wikibooks.org/wiki/Category:Shelf:SQL",target:"_blank",rel:"noopener noreferrer"},g={href:"https://github.com/XD-DENG/SQL-exercise",target:"_blank",rel:"noopener noreferrer"};function f(C,E){const a=o("ExternalLinkIcon");return l(),c("div",null,[r,d,n("h2",u,[k,s(),n("a",h,[s("mysql 索引失效"),e(a)])]),n("h2",v,[_,s(),n("a",m,[s("mysql 内置函数"),e(a)])]),b,n("ul",null,[n("li",null,[n("a",y,[s("wiki/Category:Shelf:SQL"),e(a)])]),n("li",null,[n("a",g,[s("wiki-sql-exercise"),e(a)])])])])}const q=t(i,[["render",f],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/database/mysql/mysql.html.vue"]]);export{q as default};
