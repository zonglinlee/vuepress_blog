import{_ as o,r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-4d1d3ef4.js";const i="/vuepress_blog/assets/react_lifecycle-d7cf3830.jpg",u={},r=n("h2",{id:"react-api",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#react-api","aria-hidden":"true"},"#"),s(" react api")],-1),d=n("h3",{id:"usecallback",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#usecallback","aria-hidden":"true"},"#"),s(" useCallback")],-1),k=n("p",null,[n("code",null,"React.useCallback(fn, dependencies)"),s(" : 缓存传入的 "),n("strong",null,"fn"),s(" 函数，并不会调用 "),n("strong",null,"fn")],-1),m={id:"adding-a-ref-to-a-class-component",tabindex:"-1"},v=n("a",{class:"header-anchor",href:"#adding-a-ref-to-a-class-component","aria-hidden":"true"},"#",-1),h={href:"https://legacy.reactjs.org/docs/refs-and-the-dom.html#adding-a-ref-to-a-class-component",target:"_blank",rel:"noopener noreferrer"},f=t(`<p>using ref to reference a class component instance</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 这里的 ref 引用的是 AutoFocusTextInput 实例</span>
<span class="token keyword">class</span> <span class="token class-name">AutoFocusTextInput</span> <span class="token keyword">extends</span> <span class="token class-name">React</span><span class="token punctuation">.</span>Component <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomTextInput</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>But you may not use the ref attribute on function components because they don’t have instances.</p><p>If you want to allow people to take a ref to your <strong>function component</strong>, you can use <code>forwardRef</code> (possibly in conjunction with <code>useImperativeHandle</code>), or you can <strong>convert</strong> the component to a <strong>class</strong>.</p><p>You can, however, use the ref attribute inside a function component as long as you refer to a <strong>DOM element</strong> or a ** class component**:</p><h3 id="forwardref" tabindex="-1"><a class="header-anchor" href="#forwardref" aria-hidden="true">#</a> forwardRef</h3><p><code>React.forwardRef((props,ref)=&gt;{return ReactComponent})</code> : lets your component expose a DOM node to parent component with a <code>ref</code>. <code>forwardRef</code> accepts a render function as an argument. React calls this function with props and <code>ref</code><code>forwardRef</code> returns a React component,a component returned by forwardRef is also able to receive a ref prop,使用这个返回的 component 时候，传入 ref prop 即可。</p><ul><li>ref object</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> myRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>myRef<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>ref callback</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,11),b={id:"useref-hook-on-a-custom-component",tabindex:"-1"},g=n("a",{class:"header-anchor",href:"#useref-hook-on-a-custom-component","aria-hidden":"true"},"#",-1),y={href:"https://stackoverflow.com/questions/61192450/useref-hook-on-a-custom-component",target:"_blank",rel:"noopener noreferrer"},_=t(`<p>On custom components, ref needs to be <strong>forwarded</strong>. This is because <code>ref</code> is (usually) a reference to a DOM element. A React Component can renders multiple DOM element, so you need to be explicit about where the ref should be assigned to.</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">const</span> salesRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Sales</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>salesRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">// inside Sales.js</span>
<span class="token comment">// assigns the ref to an actual DOM element, the div</span>
<span class="token keyword">const</span> <span class="token function-variable function">Sales</span> <span class="token operator">=</span> <span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span>Sales<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When the <code>&lt;div&gt;</code> DOM node is added to the screen, React will call your <code>ref</code> callback with the DOM node as the argument. When that <code>&lt;div&gt;</code> DOM node is removed, React will call your ref callback with <code>null</code>.</p>`,3),w={id:"uselayouteffect",tabindex:"-1"},x=n("a",{class:"header-anchor",href:"#uselayouteffect","aria-hidden":"true"},"#",-1),R={href:"https://react.dev/reference/react/useLayoutEffect",target:"_blank",rel:"noopener noreferrer"},E=n("p",null,[s("is a version of "),n("code",null,"useEffect"),s(" that fires before the browser repaints the screen.")],-1),M=n("p",null,[s("React guarantees that the code inside "),n("code",null,"useLayoutEffect"),s(" and any state updates scheduled inside it will be processed before the browser repaints the screen. This lets you render the tooltip, measure it, and re-render the tooltip again without the user noticing the first extra render. In other words, useLayoutEffect "),n("strong",null,"blocks"),s(" the browser from painting")],-1),D={id:"react-elements-vs-react-nodes",tabindex:"-1"},I=n("a",{class:"header-anchor",href:"#react-elements-vs-react-nodes","aria-hidden":"true"},"#",-1),S={href:"https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement",target:"_blank",rel:"noopener noreferrer"},j=n("ul",null,[n("li",null,"A ReactElement is an object with a type and props"),n("li",null,"A ReactNode is a ReactElement, a ReactFragment, a string, a number or an array of ReactNodes, or null, or undefined, or a boolean")],-1),C=n("p",null,[n("code",null,"React.isValidElement"),s(" checks whether the argument is a "),n("code",null,"React element"),s(", not whether it’s a "),n("code",null,"React node"),s(".")],-1),O={id:"usememo-vs-usecallback",tabindex:"-1"},N=n("a",{class:"header-anchor",href:"#usememo-vs-usecallback","aria-hidden":"true"},"#",-1),T={href:"https://react.dev/reference/react/useCallback#how-is-usecallback-related-to-usememo",target:"_blank",rel:"noopener noreferrer"},q=n("ul",null,[n("li",null,[n("p",null,[n("code",null,"useMemo"),s(" caches the result of calling your function.")])]),n("li",null,[n("p",null,[n("code",null,"useCallback"),s(" caches the function itself. Unlike "),n("code",null,"useMemo"),s(", it does not call the function you provide.")])])],-1),L={id:"react-lifecycle-vs-hooks",tabindex:"-1"},U=n("a",{class:"header-anchor",href:"#react-lifecycle-vs-hooks","aria-hidden":"true"},"#",-1),A={href:"https://retool.com/blog/the-react-lifecycle-methods-and-hooks-explained/",target:"_blank",rel:"noopener noreferrer"},H=t('<p>React has four built-in methods that gets called, in this order, when mounting a component:</p><ul><li><code>constructor()</code></li><li><code>getDerivedStateFromProps()</code></li><li><code>render()</code></li><li><code>componentDidMount()</code></li></ul><p>The render() method is required and will always be called, the others are optional and will be called if you define them.</p><p>React has five built-in methods that gets called, in this order, when a component is updated:</p><ul><li><code>getDerivedStateFromProps()</code></li><li><code>shouldComponentUpdate()</code></li><li><code>render()</code></li><li><code>getSnapshotBeforeUpdate()</code></li><li><code>componentDidUpdate()</code></li></ul><p>The <code>render()</code> method is required and will always be called, the others are optional and will be called if you define them</p><ul><li><code>componentDidMount</code>: React will call it when your component is added (mounted) to the screen</li><li><code>componentDidUpdate</code>: component re-renders due to changed props or state.</li><li><code>componentWillUnmount</code>: component has been removed (unmounted) from the screen.</li></ul><p><img src="'+i+'" alt="react 生命周期"></p><p>in development when <strong>Strict Mode</strong> is on, React will call componentDidMount, immediately call componentWillUnmount, and then call componentDidMount again.</p><h4 id="hooks-lifecycle" tabindex="-1"><a class="header-anchor" href="#hooks-lifecycle" aria-hidden="true">#</a> hooks lifecycle</h4><ul><li><code>useEffect(setup, dependencies?)</code></li></ul><p>The <code>useEffect</code> hook works similarly to the three lifecycle methods: <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code>.</p><p>when the dependencies array is empty, the setup function only get called once; it works similarly to <code>componentDidMount</code> ;</p><p>if the dependencies isn&#39;t empty, everytime when the dependencies changed, the setup function get called, it works similarly to <code>componentDidUpdate</code>;</p><p>useEffect will return a <strong>fn</strong> which will automatically get called when the component unmount, it works similarly to <code>componentWillUnmount</code></p>',15),P={id:"useeffect-和-uselayouteffect-的区别",tabindex:"-1"},V=n("a",{class:"header-anchor",href:"#useeffect-和-uselayouteffect-的区别","aria-hidden":"true"},"#",-1),B={href:"https://pengfeixc.com/blog/605af93600f1525af762a725",target:"_blank",rel:"noopener noreferrer"},F=t(`<p><code>useEffect</code> 是异步执行，而 <code>useLayoutEffect</code> 是同步执行的 当函数组件刷新（渲染）时，包含 useEffect 的组件整个运行过程如下</p><ul><li>触发组件重新渲染（通过改变组件 state 或者组件的父组件重新渲染，导致子节点渲染）。</li><li>组件函数执行。</li><li>组件渲染后呈现到屏幕上。</li><li>useEffect hook 执行。</li></ul><p>当函数组件刷新（渲染）时，包含 <code>useLayoutEffect</code> 的组件整个运行过程如下：</p><ul><li>触发组件重新渲染（通过改变组件 state 或者组件的父组件重新渲染，导致子组件渲染）。</li><li>组件函数执行。</li><li>useLayoutEffect hook 执行, React 等待 useLayoutEffect 的函数执行完毕。</li><li>组件渲染后呈现到屏幕上。</li></ul><p><code>useEffect</code> 异步执行的优点是，react 渲染组件不必等待 <code>useEffect</code> 函数执行完毕，造成阻塞.百分之 99 的情况，使用 <code>useEffect</code> 就可以了，唯一需要用到 <code>useLayoutEffect</code> 的情况就是，在使用 <code>useEffect</code> 的情况下，我们的屏幕会出现闪烁的情况（组件在很短的时间内渲染了两次）</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 下面的代码，组件就会渲染两次</span>
<span class="token keyword">const</span> <span class="token function-variable function">OnlyTest</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> mountedRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// useLayoutEffect(() =&gt; {</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mountedRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;first mount&#39;</span><span class="token punctuation">)</span>
      mountedRef<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;useEffect_callback_trigger&#39;</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>value<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span>
      <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;onClick_trigger&#39;</span><span class="token punctuation">)</span>
        <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        width<span class="token operator">:</span> <span class="token string">&#39;100px&#39;</span><span class="token punctuation">,</span>
        background<span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
        textAlign<span class="token operator">:</span> <span class="token string">&#39;center&#39;</span><span class="token punctuation">,</span>
        color<span class="token operator">:</span> <span class="token string">&#39;white&#39;</span><span class="token punctuation">,</span>
        padding<span class="token operator">:</span> <span class="token string">&#39;4px&#39;</span><span class="token punctuation">,</span>
        cursor<span class="token operator">:</span> <span class="token string">&#39;pointer&#39;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">&gt;</span></span><span class="token plain-text">
      value:</span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),W={id:"check-components-mounted-status",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#check-components-mounted-status","aria-hidden":"true"},"#",-1),J={href:"https://jasonwatmore.com/post/2021/08/27/react-how-to-check-if-a-component-is-mounted-or-unmounted",target:"_blank",rel:"noopener noreferrer"},X=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">export</span> <span class="token punctuation">{</span> ExampleComponent <span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">ExampleComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> mounted <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// The useEffect() hook is called when the component is mounted and sets the mounted.current value to true</span>
    mounted<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">// clean up</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      mounted<span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyComponent</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),Y={id:"react-useimperativehandle-ref-createhandle-dependencies",tabindex:"-1"},G=n("a",{class:"header-anchor",href:"#react-useimperativehandle-ref-createhandle-dependencies","aria-hidden":"true"},"#",-1),K={href:"https://react.dev/reference/react/useImperativeHandle",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p><code>useImperativeHandle</code> is a React Hook that lets you customize the handle exposed as a <code>ref</code> Parameters</p><ul><li>The <code>ref</code> you received as the second argument from the <code>forwardRef</code> render function.</li><li>createHandle: A function that takes no arguments and returns the ref handle you want to expose. That ref handle can have any type. Usually, you will return an object with the methods you want to expose.</li></ul><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// expose custom methods that you want to expose to parent components</span>
<span class="token comment">// in other words ,parent ref not has full access to dom element</span>
<span class="token comment">// forwardref is no longer bind to dom element, instead, create a new ref in MyInput component,bind it to actual dom element</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> forwardRef<span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useImperativeHandle <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>

<span class="token keyword">const</span> MyInput <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">MyInput</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>

  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>
    ref<span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token spread"><span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),Z={id:"react-memo-component-arepropsequal",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#react-memo-component-arepropsequal","aria-hidden":"true"},"#",-1),nn={href:"https://react.dev/reference/react/memo",target:"_blank",rel:"noopener noreferrer"},sn=n("ul",null,[n("li",null,"arePropsEqual: A function that accepts two arguments: the component’s previous props, and its new props. It should return true if the old and new props are equal: that is, if the component will render the same output and behave in the same way with the new props as with the old. Otherwise it should return false. Usually, you will not specify this function. By default, React will compare each prop with Object.is")],-1),an=n("p",null,"Wrap a component in memo to get a memoized version of that component. This memoized version of your component will usually not be re-rendered when its parent component is re-rendered as long as its props have not changed",-1),en={id:"reactdom-createportal-children-domnode-key",tabindex:"-1"},tn=n("a",{class:"header-anchor",href:"#reactdom-createportal-children-domnode-key","aria-hidden":"true"},"#",-1),on={href:"https://react.dev/reference/react-dom/createPortal",target:"_blank",rel:"noopener noreferrer"},pn=t('<p>createPortal lets you render some children into a different part of the DOM. createPortal returns a React node that can be included into JSX or returned from a React component</p><ul><li><p>children: Anything that can be rendered with React, such as a piece of JSX (e.g. <code>&lt;div /&gt;</code> or <code>&lt;SomeComponent /&gt;</code>), a Fragment (<code>&lt;&gt;...&lt;/&gt;</code>), a string or a number, or an array of these</p></li><li><p>domNode: Some DOM node, such as those returned by <code>document.getElementById()</code>. The node must already exist. Passing a different DOM node during an update will cause the portal content to be recreated.</p></li><li><p>optional key: A unique string or number to be used as the portal’s key.</p></li></ul><h3 id="setstate-nextstate-callback" tabindex="-1"><a class="header-anchor" href="#setstate-nextstate-callback" aria-hidden="true">#</a> setState(nextState, callback?)</h3><p>nextState: Either an object or a function.</p><ul><li>If you pass an object as nextState, it will be shallowly merged into this.state.</li><li>If you pass a function as nextState, it will be treated as an updater function. It must be pure, should take the pending state and props as arguments, and should return the object to be shallowly merged into this.state. React will put your updater function in a queue and re-render your component. During the next render, React will calculate the next state by applying all of the queued updaters to the previous state.</li></ul>',5),cn={id:"finddomnode",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#finddomnode","aria-hidden":"true"},"#",-1),un={href:"https://react.dev/reference/react-dom/findDOMNode",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>Call <code>findDOMNode</code> to find the browser DOM node for a given React class component instance.</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> findDOMNode <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>

<span class="token keyword">const</span> domNode <span class="token operator">=</span> <span class="token function">findDOMNode</span><span class="token punctuation">(</span>componentInstance<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="react-util" tabindex="-1"><a class="header-anchor" href="#react-util" aria-hidden="true">#</a> react util</h2><ul><li>useId: 返回全局的 id,兼容了 <code>React.useId</code> api</li><li>render: 兼容了 react 各个版本的 React.createRoot().render() 方法</li></ul><h2 id="react-transition" tabindex="-1"><a class="header-anchor" href="#react-transition" aria-hidden="true">#</a> react transition</h2><h3 id="rc-motion-ant-design-base-component" tabindex="-1"><a class="header-anchor" href="#rc-motion-ant-design-base-component" aria-hidden="true">#</a> rc-motion (ant-design base component)</h3><p>如下当切换 <code>show:true</code> 的时候，CSSMotion 组件会将 <code>.fade .fade-appear .fade-enter .fade-enter-active</code> 等 class 应用于 div 元素; 如下当切换 <code>show:false</code> 的时候，CSSMotion 组件会将 <code>.fade .fade-leave-active</code> 等 class 应用于 div 元素;</p><p>js 会在浏览器每帧之间添加和移除这些 <code>class</code> 类，浏览器会根据相应的 css 样式在两个 css 状态之间展示过渡动画，过渡动画的效果以及时间完全由 css 样式和 <code>css transition</code> 属性决定，<code>CSSMotion</code>组件只是在适当的时间进行添加和移除 class 类</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CSSMotion</span></span> <span class="token attr-name">motionName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fade<span class="token punctuation">&quot;</span></span> <span class="token attr-name">visible</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>show<span class="token punctuation">}</span></span> <span class="token attr-name">removeOnLeave</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
  </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> style<span class="token punctuation">,</span> <span class="token literal-property property">className</span><span class="token operator">:</span> motionClassName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token operator">...</span>style <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token function">classNames</span><span class="token punctuation">(</span><span class="token string">&#39;card&#39;</span><span class="token punctuation">,</span> motionClassName<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        rc-motion
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">CSSMotion</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-scss line-numbers-mode" data-ext="scss"><pre class="language-scss"><code><span class="token selector">.card </span><span class="token punctuation">{</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid green<span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> 1s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.fade </span><span class="token punctuation">{</span>
  <span class="token selector"><span class="token parent important">&amp;</span>.fade-appear,
  <span class="token parent important">&amp;</span>.fade-enter </span><span class="token punctuation">{</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector"><span class="token parent important">&amp;</span>.fade-appear.fade-appear-active,
  <span class="token parent important">&amp;</span>.fade-enter.fade-enter-active </span><span class="token punctuation">{</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token selector"><span class="token parent important">&amp;</span>.fade-leave-active </span><span class="token punctuation">{</span>
    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function dn(kn,mn){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,d,k,n("h3",m,[v,s(),n("a",h,[s("Adding a Ref to a Class Component"),e(a)])]),f,n("h4",b,[g,s(),n("a",y,[s("useRef() Hook on a custom component"),e(a)])]),_,n("h3",w,[x,s(),n("a",R,[s("useLayoutEffect"),e(a)])]),E,M,n("h3",D,[I,s(),n("a",S,[s("React elements vs React nodes"),e(a)])]),j,C,n("h3",O,[N,s(),n("a",T,[s("useMemo vs useCallback"),e(a)])]),q,n("h3",L,[U,s(),n("a",A,[s("react lifecycle vs hooks"),e(a)])]),H,n("h4",P,[V,s(),n("a",B,[s("useEffect 和 useLayoutEffect 的区别"),e(a)])]),F,n("h4",W,[z,s(),n("a",J,[s("check components mounted status"),e(a)])]),X,n("h3",Y,[G,s(),n("a",K,[s("React.useImperativeHandle(ref, createHandle, dependencies?)"),e(a)])]),Q,n("h3",Z,[$,s(),n("a",nn,[s("React.memo(Component, arePropsEqual?)"),e(a)])]),sn,an,n("h3",en,[tn,s(),n("a",on,[s("ReactDOM.createPortal(children, domNode, key?)"),e(a)])]),pn,n("h3",cn,[ln,s(),n("a",un,[s("findDOMNode"),e(a)])]),rn])}const hn=o(u,[["render",dn],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/vue2/react.html.vue"]]);export{hn as default};
