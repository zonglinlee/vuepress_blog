import{_ as e,r as p,o,c as i,a as n,b as s,d as c,e as a}from"./app-4d1d3ef4.js";const l={},u=a(`<h2 id="wordpress-主题目录结构" tabindex="-1"><a class="header-anchor" href="#wordpress-主题目录结构" aria-hidden="true">#</a> wordpress 主题目录结构</h2><ul><li><code>style.css</code>: wordpress的主要样式，样式首行为注释，约定主题 名称，作者，版本号,wordpress 会读取这些信息</li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token comment">/*
Theme Name: themeName
Author: authorName
version: 0.0.1
 */</span>
<span class="token selector">body</span> <span class="token punctuation">{</span>
    <span class="token property">color</span><span class="token punctuation">:</span> orangered<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>index.php</code>: wordpress 主题的主页文件,这个页面循环调用 <code>have_posts()</code>,会获取所有发布的文章。wordpress著名的 <code>famous loop</code> 如下</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?</span> php
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">the_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">the_permalink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">the_title</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token delimiter important">?&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">the_content</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">}</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>header.php</code>: wordpress 的 header 模板</li><li><code>footer.php</code>: wordpress 的 footer 模板</li><li><code>single.php</code>: wordpress 单个 post 模板页面，这个页面循环调用 <code>famous loop</code>,只会展示单个post</li><li><code>page.php</code>: wordpress 独立页面的模板, 这个页面循环调用 <code>famous loop</code>,只会展示单个独立页面</li><li><code>front-page.php</code>: 当 wordpress 首页设置为独立静态页面时候, 会使用 front-page.php 作为模板</li><li><code>archive.php</code>: WordPress 归档页面，按照 时间、作者、文章分类 等等，归档页面的模板，如果归档页面模板不存在，会使用 index.php 作为 fallback(事实上，index.php也会作为其他页面的 fallback page)</li><li><code>functions.php</code>: 调用wordpress内置钩子，加载自定义函数,如下通过 add_action 添加自定义函数 <code>load_files</code>,来加载 <code>index.css</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">load_files</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">wp_enqueue_style</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;my_index_stylesheet&#39;</span><span class="token punctuation">,</span> <span class="token function">get_stylesheet_uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;wp_enqueue_scripts&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;load_files&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>screenshot.png</code>: 主题安装页面的缩略图</li></ul><h2 id="代码须知" tabindex="-1"><a class="header-anchor" href="#代码须知" aria-hidden="true">#</a> 代码须知</h2><ul><li>wordpress 以 <code>get_</code> 开头的函数，内部都没有echo,我们得到的是 返回值，在页面上需要 echo 输出; 以<code>the_</code>开头的函数得到的是 echo 到页面上的内容，我们只需要调用即可</li><li>后台管理主题中菜单项默认不显示，注册之后才可以显示,然后在 需要使用菜单的地方 调用 <code>wp_nav_menu(array(&#39;theme_location&#39; =&gt; &#39;headerMenu1&#39;))</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">registerMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 第一个参数 后续在 header.php 中需要使用, 第二个参数是后台管理页面菜单分组的展示</span>
    <span class="token function">register_nav_menu</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;headerMenu1&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;注册 headerMenu1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;after_setup_theme&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;registerMenu&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>wordpress 自定义 query，WordPress 默认情况下会根据 URL 来进行查询，如果是首页，则默认查询最近 10 条post，如果是 独立page页面，则查询当前 page，如果我们想更改默认查询，就需要自定义 query, 使用 <code>new WP_Query</code>,最后要还原默认查询 <code>wp_reset_postdata()</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$homePagePost</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_Query</span><span class="token punctuation">(</span>
          <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts_per_page&#39;</span> <span class="token operator">=&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span><span class="token punctuation">;</span>
      
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$homePagePost</span><span class="token operator">-&gt;</span><span class="token function">have_posts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$homePagePost</span><span class="token operator">-&gt;</span><span class="token function">the_post</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> post info <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
                
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token punctuation">}</span> <span class="token function">wp_reset_postdata</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>wordpress 自定义post type,在主题文件夹上一级目录(wp-content)目录下，新建文件夹 <code>mu-plugins</code> ,这个目录里面的php文件WordPress都会执行，与主题无关.添加如下代码，添加一个event类型的文章类型，后台管理页面就会出现 <code>Events</code>的面板</li><li>自定义postType后页面找不见情况时候，需要在后台固定链接页面刷新一下 <code>固定链接结构</code>,即重新点击一下 <strong>保存更改</strong> 按钮</li><li>新建 <code>archive-event.php</code> <code>single-event.php</code> 作为归档和文章页面的模板框架，注意文件命名 <code>archive-postType.php single-postType.php</code></li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">add_custom_post_type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 新增一个 type 为 event 的 post，wordpress 默认 postType 为 page 和 post</span>
    <span class="token function">register_post_type</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;event&#39;</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">&#39;show_in_rest&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;public&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;menu_icon&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;dashicons-calendar&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;has_archive&#39;</span> <span class="token operator">=&gt;</span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 开启归档</span>
        <span class="token string single-quoted-string">&#39;rewrite&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;slug&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;events&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 定义 url 为 /events</span>
        <span class="token string single-quoted-string">&#39;supports&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;editor&#39;</span><span class="token punctuation">,</span><span class="token string single-quoted-string">&#39;excerpt&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;labels&#39;</span> <span class="token operator">=&gt;</span> <span class="token keyword">array</span><span class="token punctuation">(</span> <span class="token comment">// 设置后台管理页面显示</span>
            <span class="token string single-quoted-string">&#39;name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Events&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;add_new_item&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Add new Events&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;edit_item&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Edit event&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;all_items&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;All Events&#39;</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">&#39;singular_name&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Event&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token operator">-</span> 如果需要给文章添加 自定义 字段，可以使用 <span class="token string backtick-quoted-string">\`advanced custom fields\`</span>这个插件，添加完自定义字段后，在php文件中通过 <span class="token function">the_field</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span> 或者 <span class="token function">get_field</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span> 来使用

<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;init&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;add_custom_post_type&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>wordpress 自定义查询分页会失效，需要稍作调整自定义查询参数</li><li>在functions.php中添加钩子函数，可以拦截默认查询，并修改相应的查询参数</li></ul><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token keyword">function</span> <span class="token function-definition function">adjust_default_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 非后台管理页面 &amp;&amp; 自定义event类型的post &amp;&amp; 是默认查询（非自定义query）</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token function">is_post_type_archive</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;event&#39;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">is_main_query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token variable">$today</span> <span class="token operator">=</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;Ymd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;meta_key&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;event_date&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;orderby&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;meta_value_num&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;order&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;ASC&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$query</span><span class="token operator">-&gt;</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;meta_query&#39;</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token keyword">array</span><span class="token punctuation">(</span>
                <span class="token string single-quoted-string">&#39;key&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;event_date&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;compare&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;&gt;=&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;value&#39;</span> <span class="token operator">=&gt;</span> <span class="token variable">$today</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;type&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;numeric&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
<span class="token function">add_action</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;pre_get_posts&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;adjust_default_query&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2>`,18),r={href:"https://blog.51cto.com/simadi/3137787",target:"_blank",rel:"noopener noreferrer"},d=a(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>location / {
    try_files $uri $uri/ /index.php?$args;
}

# Add trailing slash to */wp-admin requests.
rewrite /wp-admin$ $scheme://$host$uri/ permanent;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function k(g,v){const t=p("ExternalLinkIcon");return o(),i("div",null,[u,n("ul",null,[n("li",null,[s("wordpress更改固定链接,id 形式改成 post_name 形式后页面刷新报 404 "),n("a",r,[s("nginx 需要进行伪静态配置"),c(t)])])]),d])}const h=e(l,[["render",k],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/others/wordpress.html.vue"]]);export{h as default};
