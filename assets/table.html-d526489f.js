import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-4d1d3ef4.js";const i={},u={id:"colgroup-元素",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#colgroup-元素","aria-hidden":"true"},"#",-1),d={href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/colgroup",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"<colgroup>",-1),v=t(`<p>The <code>&lt;colgroup&gt;</code> HTML element defines a group of columns within a table. The <code>&lt;colgroup&gt;</code> HTML element defines a group of columns within a table. the <code>&lt;colgroup&gt;</code> must appear after any optional <code>&lt;caption&gt;</code> element but before any <code>&lt;thead&gt;, &lt;th&gt;, &lt;tbody&gt;, &lt;tfoot&gt; and &lt;tr&gt; </code> element.</p><h2 id="table元素初始化" tabindex="-1"><a class="header-anchor" href="#table元素初始化" aria-hidden="true">#</a> Table元素初始化</h2><p><code>table</code> 组件由<code>TableHeader, TableFooter, TableBody</code> 三个子组件构成,在table组件data中通过<code>createStore</code> 创建了一个store对象，并将store作为props传递给了<code>TableHeader, TableFooter, TableBody</code> 三个子组件;此外table组件data中还维护了一个<code>layout</code> 对象，用来管理table组件的尺寸调节，layout对象中保存了对store对象的引用。</p><p>store 是通过 <code>Vue.extend</code> 创建的一个Vue实例，并且在store对象上挂载了对table组件实例的引用。在这里<code>Vue.extend</code> 创建的Vue实例内部维护了一组响应式数据，可以当做一个store来用, 并且store的 <code>prototype</code> 上挂载了一个 <code>mutations</code> 对象和一个 <code>commit</code> 方法，用来修改当前store内部的状态</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token parameter">table<span class="token punctuation">,</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>table<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Table is required.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Store</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    store<span class="token punctuation">.</span>table <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token doc-comment comment">/**
     * .... 省略 ....
     */</span>
    <span class="token keyword">return</span> store<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="table-column" tabindex="-1"><a class="header-anchor" href="#table-column" aria-hidden="true">#</a> table-column</h2><p><code>tableColumn</code> 组件就是补全当前列的 <code>props</code>, 设置当前列单元格渲染 <code>render</code> 函数，设置 watch 监听各个 <code>props</code> 的变化，并在 <code>mounted</code> 的时候将当前列添加到 <code>el-table</code> 组件内部的 <code>store</code>上，在 <code>destroyed</code> 的时候将当前 <code>column</code> 从 <code>store</code> 中移除掉。</p><p><code>tableColumn</code> 组件的 <code>computed</code> 属性中有个 <code>owner</code> 属性，它指向的是当前 <code>tableColumn</code> 组件所归属的父组件实例（可能是 <code>el-table</code> 或者 <code>el-table-column</code>, 存在多级表头的情况）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>owner(){
  let parent = this.$parent;
  while (parent &amp;&amp; !parent.tableId) {
    parent = parent.$parent;
  }
  return parent;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>tableColumn</code> 组件在 <code>mounted</code> 钩子中会调用 <code>store</code> 原型上的 <code>commit</code> 方法插入 <code>tableColumn</code> 组件，将所有挂载的 <code>tableColumn</code> 组件维护在<code>store.states._columns</code> 中，然后在<code>table-header</code>组件中使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>owner<span class="token punctuation">.</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;insertColumn&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>columnConfig<span class="token punctuation">,</span> columnIndex<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isSubColumn <span class="token operator">?</span> parent<span class="token punctuation">.</span>columnConfig <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="设置-column-初始属性" tabindex="-1"><a class="header-anchor" href="#设置-column-初始属性" aria-hidden="true">#</a> 设置 <code>column</code> 初始属性</h3><p>在 <code>table-column.js</code> 中 <code>created</code> 时，会进行 <code>column</code> 默认属性的补全，会调用 <code>compose</code>,从右项左依次执行</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> chains <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>setColumnRenders<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setColumnWidth<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>setColumnForcedProps<span class="token punctuation">)</span><span class="token punctuation">;</span>
column <span class="token operator">=</span> <span class="token function">chains</span><span class="token punctuation">(</span>column<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>columnConfig <span class="token operator">=</span> column<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),m={id:"compose-函数",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#compose-函数","aria-hidden":"true"},"#",-1),h={href:"https://github.com/reduxjs/redux/blob/master/src/compose.js",target:"_blank",rel:"noopener noreferrer"},y=t(`<ul><li><code>compose</code> 的参数是函数，返回的也是一个函数。</li><li>除了初始函数（最右侧的一个）外，其他函数的接收参数都是一个函数的返回值，所以<strong>初始函数的参数可以是多元的</strong>，<strong>而其他函数的接收值是一元的。</strong></li><li><code>compose</code> 函数可以接收任意的参数，所有的参数都是函数，且执行方向为自右向左。初始函数一定要放到参数的最右侧。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>funcs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token parameter">arg</span> <span class="token operator">=&gt;</span> arg<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn2</span><span class="token punctuation">(</span><span class="token parameter">b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">fn3</span><span class="token punctuation">(</span><span class="token parameter">c</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token function">compose</span><span class="token punctuation">(</span>fn1<span class="token punctuation">,</span> fn2<span class="token punctuation">,</span> fn3<span class="token punctuation">)</span> <span class="token comment">// 注意 compose 中函数执行的顺序是从右到左</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setcolumnrenders" tabindex="-1"><a class="header-anchor" href="#setcolumnrenders" aria-hidden="true">#</a> <code>setColumnRenders</code></h4><p>这个函数中主要是添加当前 <code>column</code> 的 <code>renderCell</code> 和 <code>renderHeader</code> 方法，用来实现当前列的单元格内容的渲染</p><p>默认的 <code>renderCell</code> 方法,是从路径上获取当前字段的值</p><p><code>this.$scopedSlots.default</code> 是个函数, 它的ts类型是 <code>type ScopedSlot = (props: any) =&gt; ScopedSlotChildren</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>column<span class="token punctuation">.</span><span class="token function-variable function">renderCell</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">h<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> children <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span>default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意： 这里会将 data 作为 v-slot:default=&quot;data&quot; 作为插槽 props 传入</span>
        children <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$scopedSlots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认情况下调用 getPropByPath 获取 value,默认情况下 children 是个 primitive value</span>
        children <span class="token operator">=</span> <span class="token function">originRenderCell</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">const</span> prefix <span class="token operator">=</span> <span class="token function">treeCellPrefix</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;cell&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">style</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>column<span class="token punctuation">.</span>showOverflowTooltip<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        props<span class="token punctuation">.</span>class <span class="token operator">+=</span> <span class="token string">&#39; el-tooltip&#39;</span><span class="token punctuation">;</span>
        props<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>column<span class="token punctuation">.</span>realWidth <span class="token operator">||</span> data<span class="token punctuation">.</span>column<span class="token punctuation">.</span>width<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token string">&#39;px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 默认 renderCell 返回的 jsx</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span><span class="token operator">&gt;</span>
        <span class="token punctuation">{</span>prefix<span class="token punctuation">}</span>
        <span class="token punctuation">{</span>children<span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),f={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace",target:"_blank",rel:"noopener noreferrer"},g=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 根据路径提取值</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getPropByPath</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> path<span class="token punctuation">,</span> strict</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> tempObj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
    <span class="token comment">// 将 obj[variable1] 转换成 obj.variable1 形式，方便 split</span>
    <span class="token comment">// $1 是替换 第一个捕获组中的匹配内容的</span>
    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\[(\\w+)\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;.$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将 . 开头的路径 移除起始位的 .</span>
    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\.</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> keyArr <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> len <span class="token operator">=</span> keyArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tempObj <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>strict<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> key <span class="token operator">=</span> keyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> tempObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            tempObj <span class="token operator">=</span> tempObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>strict<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;please transfer a valid prop path to form item!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">o</span><span class="token operator">:</span> tempObj<span class="token punctuation">,</span>
        <span class="token literal-property property">k</span><span class="token operator">:</span> keyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token literal-property property">v</span><span class="token operator">:</span> tempObj <span class="token operator">?</span> tempObj<span class="token punctuation">[</span>keyArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token keyword">null</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="setcolumnwidth" tabindex="-1"><a class="header-anchor" href="#setcolumnwidth" aria-hidden="true">#</a> <code>setColumnWidth</code></h4><p>这个步骤是为了标准化当前 <code>column</code> 上的<code>with</code> 属性，<code>table-column</code> 中有个计算属性 <code>realWidth</code>,如果 <code>el-column</code> 组件传入了 <code>width</code> 属性，则会将 <code>with</code> 进行 <code>parseInt</code> 转换为 <code>number</code>类型 赋给 <code>this.width 和 this.realWith</code>;如果没有传入 <code>width</code> 属性， 则 <code>with</code> 和 <code>realWith</code> 为 <code>undefined</code>; 如果没有传入 <code>minWidth</code> 属性，则设置默认 <code>minWith</code> 为 <code>80</code>。对于 <code>with</code> 和 <code>realWith</code> 为 <code>undefined</code>的列，最后会被当作弹性列 <code>flexColumns</code>,会给它们分配剩余空间</p><h2 id="table-header" tabindex="-1"><a class="header-anchor" href="#table-header" aria-hidden="true">#</a> table-header</h2><h3 id="vue内置方法this-l" tabindex="-1"><a class="header-anchor" href="#vue内置方法this-l" aria-hidden="true">#</a> vue内置方法<code>this._l</code></h3><p><code>this._l</code> 是 <code>vue</code> 框架中的遍历方法（<code>Runtime helper for rendering v-for lists</code>） 返回值是 <code>Array&lt;VNode&gt;</code>,这个方法存在于</p><p><code>vue/src/core/instance/render-helpers/render-list.js （vue version 2.6）</code></p><p>它接收两个参数 第一个是要渲染的 对象 ，第二个参数是一个 <code>render</code> 函数</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">renderList</span><span class="token punctuation">(</span>
    val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
    <span class="token function-variable function">render</span><span class="token operator">:</span> <span class="token punctuation">(</span>
        val<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span>
        keyOrIndex<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
        index<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span>
    <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> VNode
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token operator">?</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> ret<span class="token operator">:</span> <span class="token operator">?</span><span class="token builtin">Array</span><span class="token operator">&lt;</span>VNode<span class="token operator">&gt;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> l<span class="token punctuation">,</span> keys<span class="token punctuation">,</span> key
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> val<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> val <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> val<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasSymbol <span class="token operator">&amp;&amp;</span> val<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
            <span class="token keyword">const</span> iterator<span class="token operator">:</span> Iterator<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">=</span> val<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">let</span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">render</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>value<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
                result <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            ret <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Array</span></span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span>length<span class="token punctuation">)</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> l <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                key <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
                ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span>val<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isDef</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// (ret: any)._isVList = true</span>
    <span class="token keyword">return</span> ret
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,10),w={href:"https://segmentfault.com/a/1190000018899312",target:"_blank",rel:"noopener noreferrer"},x={href:"https://icode.best/i/58660138338370",target:"_blank",rel:"noopener noreferrer"};function _(j,C){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("h2",u,[r,s(),n("a",d,[k,s("元素"),e(a)])]),v,n("h4",m,[b,s(),n("a",h,[s("compose 函数"),e(a)])]),y,n("p",null,[s("给定一个多层嵌套对象，根据路径获取对应的值，"),n("a",f,[s("String.prototype.replace"),e(a)])]),g,n("ul",null,[n("li",null,[n("a",w,[s("固定列和表头的表格实现"),e(a)])]),n("li",null,[n("a",x,[s("横向滚动条保持在可视范围中"),e(a)])])])])}const T=p(i,[["render",_],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/element-ui/table.html.vue"]]);export{T as default};
