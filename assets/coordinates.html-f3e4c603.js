import{_ as o,r as p,o as l,c as i,a as n,b as s,d as t,e}from"./app-4d1d3ef4.js";const c="/vuepress_blog/assets/element_dimension-94c96190.png",r="/vuepress_blog/assets/clientLeft-4e8ff910.png",u="/vuepress_blog/assets/dom_position-d29b6175.png",d="/vuepress_blog/assets/insertHtml-6f602b53.png",k={},m=n("h2",{id:"window",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#window","aria-hidden":"true"},"#"),s(" window")],-1),h={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX",target:"_blank",rel:"noopener noreferrer"},v={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset",target:"_blank",rel:"noopener noreferrer"},b={href:"https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset",target:"_blank",rel:"noopener noreferrer"},f=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取元素相对于文档的坐标</span>
<span class="token keyword">function</span> <span class="token function">getCoords</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> box <span class="token operator">=</span> elem<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span> box<span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>pageYOffset<span class="token punctuation">,</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span> box<span class="token punctuation">.</span>left <span class="token operator">+</span> window<span class="token punctuation">.</span>pageXOffset
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="窗口-vs-文档" tabindex="-1"><a class="header-anchor" href="#窗口-vs-文档" aria-hidden="true">#</a> 窗口 vs 文档</h2><h3 id="窗口的-width-height" tabindex="-1"><a class="header-anchor" href="#窗口的-width-height" aria-hidden="true">#</a> 窗口的 <strong>width/height</strong></h3><ul><li><code>documentElement.clientHeight/documentElement.clientWidth</code>: 没有滚动条（减去它）的 width/height</li><li><code>window.innerWidth/innerHeight</code>: 包括了滚动条</li></ul><h3 id="文档的-width-height" tabindex="-1"><a class="header-anchor" href="#文档的-width-height" aria-hidden="true">#</a> 文档的 <strong>width/height</strong></h3><p>理论上讲，由于根文档元素是 document.documentElement，并且它包围了所有内容，因此我们可以通过使用 <code>documentElement.scrollWidth/scrollHeight</code> 来测量文档的完整大小。但是会有浏览器兼容性问题</p><p>为了可靠地获得完整的文档高度，我们应该采用以下这些属性的最大值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> scrollHeight <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">,</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">,</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight<span class="token punctuation">,</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight
<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM 元素的当前滚动状态在其 <strong>scrollLeft/scrollTop</strong> 属性中, 但在较旧的基于 <strong>WebKit</strong> 的浏览器中则不行,幸运的是,我们可以从 <strong>window.pageXOffset/pageYOffset</strong> 中获取页面当前滚动信息， 也可以从 window 的 <strong>scrollX</strong> 和 <strong>scrollY</strong> 属性中获取滚动信息</p><h3 id="滚动的实现方式" tabindex="-1"><a class="header-anchor" href="#滚动的实现方式" aria-hidden="true">#</a> 滚动的实现方式：</h3><ul><li>可以通过更改 scrollTop/scrollLeft 来滚动常规元素</li><li><code>window.scrollBy(x,y)</code>: 将页面滚动至 相对于当前位置的 (x, y)</li><li><code>window.scrollTo(pageX,pageY)</code>: 将页面滚动至 绝对坐标 (pageX, pageY)</li><li><code>elem.scrollIntoView(top=true)</code>: 滚动页面以使 elem 可见</li></ul><p>禁止滚动：只需要设置 <code>document.body.style.overflow = &quot;hidden&quot;</code>, 使用 <code>document.body.style.overflow = &#39;&#39;</code> 恢复滚动, 这个方法的缺点是会使滚动条消失, 页面布局会变动，我们可以在 <strong>document.body</strong> 中滚动条原来的位置处通过添加 <strong>padding</strong>，来替代滚动条， 这样这个问题就解决了</p><h3 id="元素尺寸" tabindex="-1"><a class="header-anchor" href="#元素尺寸" aria-hidden="true">#</a> 元素尺寸</h3><p><img src="`+c+`" alt="元素尺寸"></p><ul><li><p><code>offsetParent</code> 是最接近的祖先（ancestor），在浏览器渲染期间，它被用于计算坐标,最近的祖先为下列之一：</p><ul><li>CSS 定位的（position 为 absolute、relative、fixed 或 sticky），</li><li>或 <code>&lt;td&gt;，&lt;th&gt;，&lt;table&gt;</code>，</li><li>或<code> &lt;body&gt;</code></li></ul></li><li><p>有以下几种情况下,offsetParent 的值为 null：</p><ul><li>对于未显示的元素（display:none 或者不在文档中）。</li><li>对于 <code>&lt;body&gt;</code> 与 <code>&lt;html&gt;</code>。</li><li>对于带有 position:fixed 的元素</li></ul></li><li><p><code>offsetLeft/offsetTop</code>: 提供相对于 offsetParent 左上角的 x/y 坐标</p></li><li><p><code>offsetWidth/Height</code>: 元素的“外部” width/height。或者，换句话说，它的完整大小（包括边框）</p></li><li><p>如果一个元素（或其任何祖先）具有 <strong>display:none</strong> 或不在文档中，则所有几何属性均为零（或 offsetParent 为 null），例如，当我们创建了一个元素，但尚未将其插入文档中，或者它（或它的祖先）具有 display:none 时，offsetParent 为 null，并且 offsetWidth 和 offsetHeight 为 0</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可以用它来检查一个元素是否被隐藏</span>
<span class="token comment">// 对于会展示在屏幕上，但大小为零的元素，它们的 isHidden 返回 true</span>
<span class="token keyword">function</span> <span class="token function">isHidden</span><span class="token punctuation">(</span><span class="token parameter">elem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">!</span>elem<span class="token punctuation">.</span>offsetWidth <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>elem<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>clientTop/Left: 边框宽度,但准确地说 —— 这些属性不是边框的 width/height，而是内侧与外侧的相对坐标，当文档从右到左显示（操作系统为阿拉伯语或希伯来语）时，此时滚动条不在右边，而是在左边，此时 clientLeft 则包含了滚动条的宽度。</p><p><img src="`+r+`" alt="元素尺寸"></p></li><li><p>clientWidth/Height：包括了 “content width” 和 “padding”，但不包括滚动条宽度（scrollbar）</p></li><li><p>scrollWidth/Height: 这些属性就像 clientWidth/clientHeight，但它们还包括滚动出（隐藏）的部分</p></li><li><p>scrollLeft/scrollTop: 属性 scrollLeft/scrollTop 是元素的隐藏、滚动部分的 width/height</p></li></ul><h3 id="css-width-vs-clientwidth" tabindex="-1"><a class="header-anchor" href="#css-width-vs-clientwidth" aria-hidden="true">#</a> css width vs clientWidth</h3><ul><li>clientWidth 值是数值，而 getComputedStyle(elem).width 返回一个以 px 作为后缀的字符串。</li><li>getComputedStyle 可能会返回非数值的 width，例如内联（inline）元素的 &quot;auto&quot;。</li><li>clientWidth 是元素的内部内容区域加上 padding，而 CSS width（具有标准的 box-sizing）是内部内容区域，不包括 padding。</li><li>如果有滚动条，并且浏览器为其保留了空间，那么某些浏览器会从 CSS width 中减去该空间（因为它不再可用于内容），而有些则不会这样做。clientWidth 属性总是相同的：如果为滚动条保留了空间，那么将减去滚动条的大小。</li></ul><h3 id="计算滚动条宽度" tabindex="-1"><a class="header-anchor" href="#计算滚动条宽度" aria-hidden="true">#</a> 计算滚动条宽度</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">computeScrollBarWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个包含滚动条的 div</span>
    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>overflowY <span class="token operator">=</span> <span class="token string">&#39;scroll&#39;</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">&#39;50px&#39;</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">&#39;50px&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 必须将其放入文档（document）中，否则其大小将为 0</span>
    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> scrollWidth <span class="token operator">=</span> div<span class="token punctuation">.</span>offsetWidth <span class="token operator">-</span> div<span class="token punctuation">.</span>clientWidth<span class="token punctuation">;</span>
    div<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> scrollWidth
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="设置-重置样式" tabindex="-1"><a class="header-anchor" href="#设置-重置样式" aria-hidden="true">#</a> 设置/重置样式</h3><ul><li>方法一：设置为空字符串；如果我们将 <strong>style.display</strong> 设置为<strong>空字符串</strong>，那么浏览器通常会应用 CSS 类以及内建样式，就好像根本没有这样的 style.display 属性一样。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;none&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 隐藏</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 恢复正常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方法二： <code>elem.style.removeProperty(&#39;style property&#39;)</code></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>background <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span> <span class="token comment">//将 background 设置为红色</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">removeProperty</span><span class="token punctuation">(</span><span class="token string">&#39;background&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>批量设置属性 :可以通过设置一个特性（attribute）来实现同样的效果：<code>div.setAttribute(&#39;style&#39;, &#39;color: red...&#39;)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;style&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;color: #ccc!important;opacity:0.8&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="dom-节点操作" tabindex="-1"><a class="header-anchor" href="#dom-节点操作" aria-hidden="true">#</a> dom 节点操作</h3><p>插入 DOM 节点或文本片段</p><ul><li>node.append(...nodes or strings) —— 在 node 末尾 插入节点或字符串</li><li>node.prepend(...nodes or strings) —— 在 node 开头 插入节点或字符串</li><li>node.before(...nodes or strings) —— 在 node 前面 插入节点或字符串</li><li>node.after(...nodes or strings) —— 在 node 后面 插入节点或字符串</li></ul><p><img src="`+u+'" alt="元素尺寸"></p><p>将内容“作为 HTML 代码插入 <code>elem.insertAdjacentHTML(where, html)</code></p><ul><li>&quot;beforebegin&quot; —— 将 html 插入到 elem 之前，</li><li>&quot;afterbegin&quot; —— 将 html 插入到 elem 开头，</li><li>&quot;beforeend&quot; —— 将 html 插入到 elem 末尾，</li><li>&quot;afterend&quot; —— 将 html 插入到 elem 之后。</li></ul><p><img src="'+d+`" alt="元素尺寸"></p><p>节点克隆</p><ul><li>调用 elem.cloneNode(true) 来创建元素的一个“深”克隆 —— 具有所有特性（attribute）和子元素。</li><li>如果我们调用 elem.cloneNode(false)，那克隆就不包括子元素</li></ul><p>节点替换</p><ul><li>node.replaceWith(...nodes or strings) —— 替换 node</li></ul><h3 id="createtextnode-vs-innerhtml-vs-textcontent" tabindex="-1"><a class="header-anchor" href="#createtextnode-vs-innerhtml-vs-textcontent" aria-hidden="true">#</a> createTextNode vs innerHTML vs textContent</h3><p>createTextNode 和 textContent 会将内容 “作为文本”添加到节点中；而 innerHTML 将内容“作为 HTML 代码插入”， 和 <code>elem.insertAdjacentHTML</code> 类似</p><h3 id="attributes-and-properties" tabindex="-1"><a class="header-anchor" href="#attributes-and-properties" aria-hidden="true">#</a> Attributes and properties</h3><p>当浏览器加载页面时，它会“读取”（或者称之为：“解析”）HTML 并从中生成 DOM 对象。对于元素节点，大多数标准的 HTML 特性（attributes）会自动变成 DOM 对象的属性（properties）,但特性—属性映射并不是一一对应的 DOM 节点是常规的 JavaScript 对象。我们可以更改它们</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>myData <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Caesar&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> <span class="token string">&#39;Imperator&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 HTML 中，标签可能拥有特性（attributes）。当浏览器解析 HTML 文本，并根据标签创建 DOM 对象时，浏览器会辨别 标准的 特性并以此创建 DOM 属性，但是非 标准的 特性则不会。 HTML 特性有以下几个特征：</p><ul><li>它们的名字是大小写不敏感的（id 与 ID 相同）。</li><li>它们的值总是字符串类型的</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>test<span class="token punctuation">&quot;</span></span> <span class="token attr-name">something</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>non-standard<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// test</span>
    <span class="token comment">// 非标准的特性没有获得对应的属性, 可以通过 elem.getAttribute(name) 获取到</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>something<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>elem.hasAttribute(name) —— 检查特性是否存在。</li><li>elem.getAttribute(name) —— 获取这个特性值。</li><li>elem.setAttribute(name, value) —— 设置这个特性值。</li><li>elem.removeAttribute(name) —— 移除这个特性。</li></ul><p>属性—特性同步： 当一个标准的特性被改变，对应的属性也会自动更新，反过来也是同样的效果，这里也有些例外，例如 <strong>input.value</strong> 只能从特性同步到属性，反过来则不行</p><p>自定义特性： 所有以 “data-” 开头的特性均被保留供程序员使用。它们可在 dataset 属性中使用。 例如，如果一个 elem 有一个名为 &quot;data-about&quot; 的特性，那么可以通过 elem.dataset.about 取到它</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">data-about</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Elephants<span class="token punctuation">&quot;</span></span> <span class="token attr-name">data-order-state</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>full<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>about<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Elephants</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>orderState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// full</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,51),y={id:"getcomputedstyle",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#getcomputedstyle","aria-hidden":"true"},"#",-1),x={href:"https://javascript.info/styles-and-classes",target:"_blank",rel:"noopener noreferrer"},_=e("<p><strong>getComputedStyle</strong> actually returns the resolved value of the property, usually in <strong>px</strong> for geometry.We should always ask for the exact property that we want, like <strong>paddingLeft</strong> or <strong>marginTop</strong> or * <em>borderTopWidth</em>*. Otherwise the correct result is not guaranteed.For instance, if there are properties <strong>paddingLeft/paddingTop</strong>, then what should we get for <code>getComputedStyle(elem).padding</code>? Nothing, or maybe a “generated” value from known paddings? There’s <strong>no standard rule</strong> here.</p><p>Don’t take <strong>width/height</strong> from CSS(<strong>getComputedStyle</strong>).There are two reasons:</p><ul><li><p>First, CSS <strong>width/height</strong> depend on another property: <strong>box-sizing</strong> that defines “what is” CSS width and height. A change in box-sizing for CSS purposes may break such JavaScript.</p></li><li><p>Second, CSS <strong>width/height</strong> may be <strong>auto</strong>, for instance for an inline element:</p></li><li><p>one more reason: a scrollbar, a scrollbar takes the space from the content in some browsers. So the real width available for the content is less than CSS width. But with <code>getComputedStyle(elem).width</code> the situation is different. Some browsers (e.g. Chrome) return the real inner width, minus the scrollbar, and some of them (e.g. Firefox) – CSS width (ignore the scrollbar)</p></li></ul>",3);function S(j,q){const a=p("ExternalLinkIcon");return l(),i("div",null,[m,n("ul",null,[n("li",null,[n("a",h,[s("window.scrollY"),t(a)]),s(": the number of pixels that the document is currently scrolled vertically.")]),n("li",null,[n("a",g,[s("window.scrollX"),t(a)]),s(": the number of pixels that the document is currently scrolled horizontally")]),n("li",null,[n("a",v,[s("window.pageYOffset"),t(a)]),s(": an alias for window.scrollY")]),n("li",null,[n("a",b,[s("window.pageXOffset "),t(a)]),s(": an alias for window.scrollX")])]),f,n("h3",y,[w,s(),n("a",x,[s("getComputedStyle"),t(a)])]),_])}const W=o(k,[["render",S],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/js_basic/coordinates.html.vue"]]);export{W as default};
