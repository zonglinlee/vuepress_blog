import{_ as t,r as o,o as p,c,a as n,b as a,d as e,e as i}from"./app-4d1d3ef4.js";const l={},u=i(`<h2 id="createwebhistory" tabindex="-1"><a class="header-anchor" href="#createwebhistory" aria-hidden="true">#</a> <code>createWebHistory</code></h2><p>初始化vueRouter时候，需要调用 <code>createWebHistory</code> 创建 <code>html5 history</code> 对象,在此过程中调用 <code>useHistoryListeners</code> 监听了 <code>popstate</code> 事件</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;popstate&#39;</span><span class="token punctuation">,</span> popStateHandler<span class="token punctuation">)</span>
window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;beforeunload&#39;</span><span class="token punctuation">,</span> beforeUnloadListener<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vuerouter路由权重匹配" tabindex="-1"><a class="header-anchor" href="#vuerouter路由权重匹配" aria-hidden="true">#</a> vueRouter路由权重匹配</h2><h3 id="path-解析成-token" tabindex="-1"><a class="header-anchor" href="#path-解析成-token" aria-hidden="true">#</a> <code>path</code> 解析成 <code>token</code></h3><p>在 <code>/src/matcher/pathTokenizer.ts</code> 中有个 专门的函数 <code>function tokenizePath(path: string): Array&lt;Token[]&gt; </code> 是专门用于解析 <code>path</code> 的, 以 <code>/users/:id</code> 为例，解析的最终结果如 <code>tokens1</code> ,它会分段将 <code>url</code> 解析成 <code>Token</code> 类型的数组,其中的 <code>type</code> 代表的是枚举类型 <code>TokenizerState</code>; <code>/:data(.*)</code>会解析成 <code>tokens2</code>,会保存 <code>regexp</code> 用来匹配 <code>data</code> 的格式;</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> tokens1 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> regexp<span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> repeatable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> optional<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
<span class="token keyword">const</span> tokens2 <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token string">&quot;data&quot;</span><span class="token punctuation">,</span> regexp<span class="token operator">:</span> <span class="token string">&quot;.*&quot;</span><span class="token punctuation">,</span> repeatable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> optional<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> <span class="token keyword">enum</span> TokenizerState <span class="token punctuation">{</span>
    Static<span class="token punctuation">,</span>
    Param<span class="token punctuation">,</span>
    ParamRegExp<span class="token punctuation">,</span> <span class="token comment">// custom re for a param</span>
    ParamRegExpEnd<span class="token punctuation">,</span> <span class="token comment">// check if there is any ? + *</span>
    EscapeNext<span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="token-生成权重-并创建完整正则匹配规则" tabindex="-1"><a class="header-anchor" href="#token-生成权重-并创建完整正则匹配规则" aria-hidden="true">#</a> <code>token</code> 生成权重 并创建完整正则匹配规则</h3><h4 id="权重规则" tabindex="-1"><a class="header-anchor" href="#权重规则" aria-hidden="true">#</a> 权重规则</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token keyword">enum</span> PathScore <span class="token punctuation">{</span>
    _multiplier <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span>
    Root <span class="token operator">=</span> <span class="token number">9</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// just /</span>
    Segment <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /a-segment</span>
    SubSegment <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /multiple-:things-in-one-:segment</span>
    Static <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /static</span>
    Dynamic <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /:someId</span>
    BonusCustomRegExp <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /:someId(\\\\d+)</span>
    BonusWildcard <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span> <span class="token operator">*</span> _multiplier <span class="token operator">-</span> BonusCustomRegExp<span class="token punctuation">,</span> <span class="token comment">// /:namedWildcard(.*) we remove the bonus added by the custom regexp</span>
    BonusRepeatable <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /:w+ or /:w*</span>
    BonusOptional <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.8</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// /:w? or /:w*</span>
    <span class="token comment">// these two have to be under 0.1 so a strict /:page is still lower than /:a-:b</span>
    BonusStrict <span class="token operator">=</span> <span class="token number">0.07</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// when options strict: true is passed, as the regex omits \\/?</span>
    BonusCaseSensitive <span class="token operator">=</span> <span class="token number">0.025</span> <span class="token operator">*</span> _multiplier<span class="token punctuation">,</span> <span class="token comment">// when options strict: true is passed, as the regex omits \\/?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认配置项" tabindex="-1"><a class="header-anchor" href="#默认配置项" aria-hidden="true">#</a> 默认配置项</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">_PathParserOptions</span> <span class="token punctuation">{</span>
    <span class="token comment">// Makes the RegExp case sensitive. Defaults to false</span>
    sensitive<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    <span class="token comment">// Should we disallow a trailing slash. Defaults to false</span>
    strict<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    <span class="token comment">// Should the RegExp match from the beginning by prepending a \`^\` to it. Defaults to true</span>
    start<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
    <span class="token comment">// Should the RegExp match until the end by appending a \`$\` to it. Defaults to true</span>
    end<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>依旧以<code>/users/:id</code> 为例，将上一步生成的 <code>tokens1</code> 进一步解析生成 <code>parser</code>,根据设置的 <code>_PathParserOptions</code>逐步添加匹配规则，得到正则字符串 <code>pattern</code> ，调用正则 <code>new RegExp</code>得到最终正则对象 <code>re</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token string">&#39;^/users/([^/]+?)$&#39;</span>
<span class="token keyword">const</span> re <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> options<span class="token punctuation">.</span>sensitive <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;i&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 最终解析出来的 parser</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">{</span>
    re<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/user\\/([^/]+?)$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">,</span> <span class="token comment">// url匹配规则</span>
    score<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">60.7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// url权重分值</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;repeatable&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;optional&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token comment">// parse: function(){},</span>
    <span class="token comment">// stringify: function(){},</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="insertmatcher" tabindex="-1"><a class="header-anchor" href="#insertmatcher" aria-hidden="true">#</a> insertMatcher</h4><p><code>insertMatcher</code> 函数中通过路由权重对 matchers 做了排序</p><h2 id="routerview组件" tabindex="-1"><a class="header-anchor" href="#routerview组件" aria-hidden="true">#</a> routerView组件</h2><p>当页面路由发生变化的时候，<code>setup</code> 中的计算属性 <code>matchedRouteRef</code> 会重新计算，从而得到与当前页面路由匹配的 <code>ViewComponent</code>,进而触发 <code>render</code> 函数渲染到当前页面上</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> RouterViewImpl <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">&#39;RouterView&#39;</span><span class="token punctuation">,</span>
    inheritAttrs<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token punctuation">{</span>
            type<span class="token operator">:</span> String <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
            <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        route<span class="token operator">:</span> Object <span class="token keyword">as</span> PropType<span class="token operator">&lt;</span>RouteLocationNormalizedLoaded<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// setup(props, context) {} ，context  结构  setup(props, { attrs, slots, emit, expose }) {}</span>
    <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span>attrs<span class="token punctuation">,</span> slots<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里在vueRouter install 方法中从 vue 实例中注入了 routerViewLocationKey</span>
        <span class="token keyword">const</span> injectedRoute <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">)</span><span class="token operator">!</span>
        <span class="token keyword">const</span> routeToDisplay <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> props<span class="token punctuation">.</span>route <span class="token operator">||</span> injectedRoute<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
        <span class="token keyword">const</span> depth <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token comment">// 获取当前的匹配路由组件的计算属性 matchedRouteRef (reference)</span>
        <span class="token keyword">const</span> matchedRouteRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">computed</span><span class="token generic class-name"><span class="token operator">&lt;</span>RouteLocationMatched <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> routeToDisplay<span class="token punctuation">.</span>value<span class="token punctuation">.</span>matched<span class="token punctuation">[</span>depth<span class="token punctuation">]</span>
        <span class="token punctuation">)</span>

        <span class="token function">provide</span><span class="token punctuation">(</span>viewDepthKey<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">provide</span><span class="token punctuation">(</span>matchedRouteKey<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">)</span>
        <span class="token function">provide</span><span class="token punctuation">(</span>routerViewLocationKey<span class="token punctuation">,</span> routeToDisplay<span class="token punctuation">)</span> <span class="token comment">// 继续向子级组件注入 routerViewLocationKey</span>

        <span class="token keyword">const</span> viewRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">ref</span><span class="token generic class-name"><span class="token operator">&lt;</span>ComponentPublicInstance<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment">// watch at the same time the component instance, the route record we are</span>
        <span class="token comment">// rendering, and the name</span>
        <span class="token function">watch</span><span class="token punctuation">(</span>
            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>viewRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> matchedRouteRef<span class="token punctuation">.</span>value<span class="token punctuation">,</span> props<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token keyword">const</span><span class="token punctuation">,</span>
            <span class="token punctuation">(</span><span class="token punctuation">[</span>instance<span class="token punctuation">,</span> to<span class="token punctuation">,</span> name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>oldInstance<span class="token punctuation">,</span> from<span class="token punctuation">,</span> oldName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// copy reused instances</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// this will update the instance for new instances as well as reused</span>
                    <span class="token comment">// instances when navigating to a new route</span>
                    to<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> instance
                    <span class="token comment">// the component instance is reused for a different route or name so</span>
                    <span class="token comment">// we copy any saved update or leave guards. With async setup, the</span>
                    <span class="token comment">// mounting component will mount before the matchedRoute changes,</span>
                    <span class="token comment">// making instance === oldInstance, so we check if guards have been</span>
                    <span class="token comment">// added before. This works because we remove guards when</span>
                    <span class="token comment">// unmounting/deactivating components</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">&amp;&amp;</span> from <span class="token operator">!==</span> to <span class="token operator">&amp;&amp;</span> instance <span class="token operator">&amp;&amp;</span> instance <span class="token operator">===</span> oldInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            to<span class="token punctuation">.</span>leaveGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>leaveGuards
                        <span class="token punctuation">}</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>to<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            to<span class="token punctuation">.</span>updateGuards <span class="token operator">=</span> from<span class="token punctuation">.</span>updateGuards
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>

                <span class="token comment">// trigger beforeRouteEnter next callbacks</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>
                    instance <span class="token operator">&amp;&amp;</span>
                    to <span class="token operator">&amp;&amp;</span>
                    <span class="token comment">// if there is no instance but to and from are the same this might be</span>
                    <span class="token comment">// the first visit</span>
                    <span class="token punctuation">(</span><span class="token operator">!</span>from <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">isSameRouteRecord</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>oldInstance<span class="token punctuation">)</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token punctuation">;</span><span class="token punctuation">(</span>to<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>callback <span class="token operator">=&gt;</span>
                        <span class="token function">callback</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">}</span>
        <span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> route <span class="token operator">=</span> routeToDisplay<span class="token punctuation">.</span>value
            <span class="token keyword">const</span> matchedRoute <span class="token operator">=</span> matchedRouteRef<span class="token punctuation">.</span>value
            <span class="token comment">// 当路由变更时候 计算属性matchedRouteRef也跟着改变，从而获取到真正的页面视图组件 ViewComponent</span>
            <span class="token keyword">const</span> ViewComponent <span class="token operator">=</span> matchedRoute <span class="token operator">&amp;&amp;</span> matchedRoute<span class="token punctuation">.</span>components<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
            <span class="token comment">// we need the value at the time we render because when we unmount, we</span>
            <span class="token comment">// navigated to a different location so the value is different</span>
            <span class="token keyword">const</span> currentName <span class="token operator">=</span> props<span class="token punctuation">.</span>name

            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ViewComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token function">normalizeSlot</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token operator">:</span> ViewComponent<span class="token punctuation">,</span> route<span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// props from route configuration</span>
            <span class="token keyword">const</span> routePropsOption <span class="token operator">=</span> matchedRoute<span class="token operator">!</span><span class="token punctuation">.</span>props<span class="token punctuation">[</span>props<span class="token punctuation">.</span>name<span class="token punctuation">]</span>
            <span class="token keyword">const</span> routeProps <span class="token operator">=</span> routePropsOption
                <span class="token operator">?</span> routePropsOption <span class="token operator">===</span> <span class="token boolean">true</span>
                    <span class="token operator">?</span> route<span class="token punctuation">.</span>params
                    <span class="token operator">:</span> <span class="token keyword">typeof</span> routePropsOption <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
                        <span class="token operator">?</span> <span class="token function">routePropsOption</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span>
                        <span class="token operator">:</span> routePropsOption
                <span class="token operator">:</span> <span class="token keyword">null</span>

            <span class="token keyword">const</span> onVnodeUnmounted<span class="token operator">:</span> VNodeProps<span class="token punctuation">[</span><span class="token string">&#39;onVnodeUnmounted&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> vnode <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// remove the instance reference to prevent leak</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>isUnmounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    matchedRoute<span class="token operator">!</span><span class="token punctuation">.</span>instances<span class="token punctuation">[</span>currentName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// h() : Creates virtual DOM nodes (vnodes). ViewComponent即是与当前路由匹配的vue组件，最终router-view渲染成了实际的动态路由组件</span>
            <span class="token keyword">const</span> component <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
                ViewComponent<span class="token punctuation">,</span>
                <span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> routeProps<span class="token punctuation">,</span> attrs<span class="token punctuation">,</span> <span class="token punctuation">{</span>
                    onVnodeUnmounted<span class="token punctuation">,</span>
                    ref<span class="token operator">:</span> viewRef<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
            <span class="token comment">// 这里返回的是一个 VNode</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>
                <span class="token comment">// pass the vnode to the slot as a prop.</span>
                <span class="token comment">// h and &lt;component :is=&quot;...&quot;&gt; both accept vnodes</span>
                <span class="token function">normalizeSlot</span><span class="token punctuation">(</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">,</span> <span class="token punctuation">{</span>Component<span class="token operator">:</span> component<span class="token punctuation">,</span> route<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">||</span>
                component
            <span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="routerlink组件" tabindex="-1"><a class="header-anchor" href="#routerlink组件" aria-hidden="true">#</a> routerLink组件</h2><p>routerLink 默认渲染成为一个 <code>a</code> 标签，并添加了 <code>click</code>事件，点击触发 <code>link.navigate</code> 方法，会调用 <code>router</code> 对象的 <code>router.replace</code> 或者 <code>router.push</code>, 最终调用的是浏览器history对象的 <code>replaceState</code> 或者 <code>pushState</code>,这会导致浏览器的url改变</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// routerLink最终默认渲染的是 a 标签 （/src/RouterLink.ts）</span>
<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span>default <span class="token operator">&amp;&amp;</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span>
    <span class="token keyword">return</span> props<span class="token punctuation">.</span>custom
        <span class="token operator">?</span> children
        <span class="token operator">:</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                href<span class="token operator">:</span> link<span class="token punctuation">.</span>href<span class="token punctuation">,</span>
                onClick<span class="token operator">:</span> link<span class="token punctuation">.</span>navigate<span class="token punctuation">,</span>
                <span class="token keyword">class</span><span class="token operator">:</span> elClass<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            children
        <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 调用history对象方法改变url (/src/history/html5.ts)</span>
history<span class="token punctuation">[</span>replace <span class="token operator">?</span> <span class="token string">&#39;replaceState&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;pushState&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vuerouter-钩子函数的调用机制" tabindex="-1"><a class="header-anchor" href="#vuerouter-钩子函数的调用机制" aria-hidden="true">#</a> vueRouter 钩子函数的调用机制</h2><h3 id="导航流程" tabindex="-1"><a class="header-anchor" href="#导航流程" aria-hidden="true">#</a> 导航流程</h3><table><thead><tr><th><strong>导航流程</strong></th><th><strong>Explanation</strong></th></tr></thead><tbody><tr><td>1.导航被触发</td><td>调用 <code>router.navigate()</code></td></tr><tr><td>2.在失活的组件里调用 <code>beforeRouteLeave</code> 守卫</td><td>组件内守卫：可以访问 <code>vm 即 this</code>,<code>router.navigate</code> 中提取当前组件中的 <code>beforeRouteLeave</code> 钩子函数</td></tr><tr><td>3.调用全局的 <code>beforeEach</code> 守卫</td><td>全局前置守卫：可选的第三个参数 <code>next</code></td></tr><tr><td>4.在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫</td><td>组件内守卫:可以访问 <code>vm 即 this</code>,<code>router.navigate</code> 中提取当前组件中的 <code>beforeRouteUpdate</code> 钩子函数</td></tr><tr><td>5.在路由配置里调用 <code>beforeEnter</code></td><td>路由独享的守卫, 配置在路由对象上</td></tr><tr><td>6.解析异步路由组件</td><td></td></tr><tr><td>7.在被激活的组件里调用 <code>beforeRouteEnter</code></td><td>组件内守卫：,<code>router.navigate</code> 中提取当前组件中的 <code>beforeRouteEnter</code> 钩子函数 ,不能访问 <code>this</code>，因为守卫在导航确认前被调用，因此即将登场的新组件还没被创建，可传入第三参数 <code>next</code>,<code>beforeRouteEnter</code> 是支持给 <code>next</code> 传递回调的唯一守卫 ,回调函数的参数是当前 <code>vue</code> 组件实例 <code>vm</code></td></tr><tr><td>8.调用全局的 <code>beforeResolve</code> 守卫</td><td>全局解析守卫</td></tr><tr><td>9.导航被确认</td><td></td></tr><tr><td>10.调用全局的 <code>afterEach</code> 钩子</td><td>全局后置钩子</td></tr><tr><td>11.触发 DOM 更新</td><td></td></tr><tr><td>12.调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code>的回调函数，创建好的组件实例会作为回调函数的参数传入</td><td>在 <code>routerView</code> 组件内触发 <code>next</code> 的回调，并传入 <code>vm</code> 实例</td></tr></tbody></table><h3 id="pushwithredirect-方法" tabindex="-1"><a class="header-anchor" href="#pushwithredirect-方法" aria-hidden="true">#</a> <code>pushWithRedirect</code> 方法</h3><p>路由想要发生变化，就是通过改变路径完成的，路由对象提供了很多改变路径的方法，比如 <code>router.push、router.replace</code>，它们的底层最终都是通过 <code>pushWithRedirect</code> 完成路径的切换。 <code>pushWithRedirect</code> 会对跳转的路由进行 <code>resolve(to)</code> 解析， 因为参数 <code>to</code> 可能有多种情况，可以是一个表示路径的字符串，也可以是一个路径对象，所以要先经过一层 <code>resolve</code> 返回一个新的路径对象。</p><p>接下来执行 <code>navigate</code> 方法，它实际上是执行路由切换过程中的一系列导航守卫函数，我们后续会介绍。<code>navigate</code> 成功后，会执行 <code>finalizeNavigation</code> 完成导航, 在这里完成真正浏览器url路径的切换。 并且会更新当前的路径 <code>currentRoute</code> 的值, 它是当前 <code>router</code> 实例上的一个属性.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">function</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
    to<span class="token operator">:</span> RouteLocationRaw <span class="token operator">|</span> RouteLocation<span class="token punctuation">,</span>
    redirectedFrom<span class="token operator">?</span><span class="token operator">:</span> RouteLocation
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>NavigationFailure <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> targetLocation<span class="token operator">:</span> RouteLocation <span class="token operator">=</span> <span class="token punctuation">(</span>pendingLocation <span class="token operator">=</span> <span class="token function">resolve</span><span class="token punctuation">(</span>to<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">const</span> from <span class="token operator">=</span> currentRoute<span class="token punctuation">.</span>value
    <span class="token keyword">const</span> data<span class="token operator">:</span> HistoryState <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span>to <span class="token keyword">as</span> RouteLocationOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>state
    <span class="token keyword">const</span> force<span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token punctuation">(</span>to <span class="token keyword">as</span> RouteLocationOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>force
    <span class="token comment">// to could be a string where \`replace\` is a function</span>
    <span class="token keyword">const</span> replace <span class="token operator">=</span> <span class="token punctuation">(</span>to <span class="token keyword">as</span> RouteLocationOptions<span class="token punctuation">)</span><span class="token punctuation">.</span>replace <span class="token operator">===</span> <span class="token boolean">true</span>

    <span class="token keyword">const</span> shouldRedirect <span class="token operator">=</span> <span class="token function">handleRedirectRecord</span><span class="token punctuation">(</span>targetLocation<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
            <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>shouldRedirect<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                state<span class="token operator">:</span> data<span class="token punctuation">,</span>
                force<span class="token punctuation">,</span>
                replace<span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// keep original redirectedFrom if it exists</span>
            redirectedFrom <span class="token operator">||</span> targetLocation
        <span class="token punctuation">)</span>

    <span class="token comment">// if it was a redirect we already called \`pushWithRedirect\` above</span>
    <span class="token keyword">const</span> toLocation <span class="token operator">=</span> targetLocation <span class="token keyword">as</span> RouteLocationNormalized

    toLocation<span class="token punctuation">.</span>redirectedFrom <span class="token operator">=</span> redirectedFrom
    <span class="token keyword">let</span> failure<span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token keyword">undefined</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>force <span class="token operator">&amp;&amp;</span> <span class="token function">isSameRouteLocation</span><span class="token punctuation">(</span>stringifyQuery<span class="token punctuation">,</span> from<span class="token punctuation">,</span> targetLocation<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        failure <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationFailure<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
            ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_DUPLICATED</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>to<span class="token operator">:</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">}</span>
        <span class="token punctuation">)</span>
        <span class="token comment">// trigger scroll to allow scrolling to the same anchor</span>
        <span class="token function">handleScroll</span><span class="token punctuation">(</span>
            from<span class="token punctuation">,</span>
            from<span class="token punctuation">,</span>
            <span class="token comment">// this is a push, the only way for it to be triggered from a</span>
            <span class="token comment">// history.listen is with a redirect, which makes it become a push</span>
            <span class="token boolean">true</span><span class="token punctuation">,</span>
            <span class="token comment">// This cannot be the first navigation because the initial location</span>
            <span class="token comment">// cannot be manually navigated to</span>
            <span class="token boolean">false</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span>failure <span class="token operator">?</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">navigate</span><span class="token punctuation">(</span>toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> NavigationRedirectError<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
                <span class="token operator">?</span> <span class="token comment">// navigation redirects still mark the router as ready</span>
                <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_GUARD_REDIRECT</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> error
                    <span class="token operator">:</span> <span class="token function">markAsReady</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token comment">// also returns the error</span>
                <span class="token operator">:</span> <span class="token comment">// reject any unknown error</span>
                <span class="token function">triggerError</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> toLocation<span class="token punctuation">,</span> from<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>failure<span class="token operator">:</span> NavigationFailure <span class="token operator">|</span> NavigationRedirectError <span class="token operator">|</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>failure<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>
                    <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>failure<span class="token punctuation">,</span> ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_GUARD_REDIRECT</span><span class="token punctuation">)</span>
                <span class="token punctuation">)</span> <span class="token punctuation">{</span>

                    <span class="token keyword">return</span> <span class="token function">pushWithRedirect</span><span class="token punctuation">(</span>
                        <span class="token comment">// keep options</span>
                        <span class="token function">assign</span><span class="token punctuation">(</span><span class="token function">locationAsObject</span><span class="token punctuation">(</span>failure<span class="token punctuation">.</span>to<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                            state<span class="token operator">:</span> data<span class="token punctuation">,</span>
                            force<span class="token punctuation">,</span>
                            replace<span class="token punctuation">,</span>
                        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token comment">// preserve the original redirectedFrom if any</span>
                        redirectedFrom <span class="token operator">||</span> toLocation
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// finalizeNavigation函数中执行 window.history 的　push / replace 方法</span>
                <span class="token comment">// finalizeNavigation 内部调用 markAsReady 函数中监听了 window上的 popstate 事件</span>
                failure <span class="token operator">=</span> <span class="token function">finalizeNavigation</span><span class="token punctuation">(</span>
                    toLocation <span class="token keyword">as</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
                    from<span class="token punctuation">,</span>
                    <span class="token boolean">true</span><span class="token punctuation">,</span>
                    replace<span class="token punctuation">,</span>
                    data
                <span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 执行 全局导航守卫 AfterEach 钩子函数</span>
            <span class="token function">triggerAfterEach</span><span class="token punctuation">(</span>
                toLocation <span class="token keyword">as</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
                from<span class="token punctuation">,</span>
                failure
            <span class="token punctuation">)</span>
            <span class="token keyword">return</span> failure
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="router-navigate-方法" tabindex="-1"><a class="header-anchor" href="#router-navigate-方法" aria-hidden="true">#</a> <code>router.navigate</code> 方法</h3><p><code>navigate</code> 执行导航守卫的方式是先构造 <code>guards</code> 数组，数组中每个元素都是一个返回 <code>Promise</code> 对象的函数,然后通过 <code>runGuardQueue</code> 去执行这些 <code>guards</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>  <span class="token keyword">function</span> <span class="token function">navigate</span><span class="token punctuation">(</span>
    to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
    from<span class="token operator">:</span> RouteLocationNormalizedLoaded
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> guards<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> <span class="token punctuation">[</span>leavingRecords<span class="token punctuation">,</span> updatingRecords<span class="token punctuation">,</span> enteringRecords<span class="token punctuation">]</span> <span class="token operator">=</span>
        <span class="token function">extractChangingRecords</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> from<span class="token punctuation">)</span>

    <span class="token comment">// all components here have been resolved once because we are leaving</span>
    <span class="token comment">// 路由导航从当前路由切换至下一个路由，提取当前组件中的 beforeRouterLeave 钩子函数</span>
    guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
        leavingRecords<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">&#39;beforeRouteLeave&#39;</span><span class="token punctuation">,</span>
        to<span class="token punctuation">,</span>
        from
    <span class="token punctuation">)</span>

    <span class="token comment">// leavingRecords is already reversed</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> leavingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        record<span class="token punctuation">.</span>leaveGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> canceledNavigationCheck <span class="token operator">=</span> <span class="token function">checkCanceledNavigationAndReject</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>
        <span class="token keyword">null</span><span class="token punctuation">,</span>
        to<span class="token punctuation">,</span>
        from
    <span class="token punctuation">)</span>

    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

    <span class="token comment">// run the queue of per route beforeRouteLeave guards</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>
        <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span> <span class="token comment">// ① 调用 beforeRouteLeave 钩子函数</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// check global guards beforeEach</span>
                guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ② beforeEach 钩子函数</span>
                    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

                <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// check in components beforeRouteUpdate</span>
                guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
                    updatingRecords<span class="token punctuation">,</span>
                    <span class="token string">&#39;beforeRouteUpdate&#39;</span><span class="token punctuation">,</span>
                    to<span class="token punctuation">,</span>
                    from
                <span class="token punctuation">)</span>

                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> updatingRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    record<span class="token punctuation">.</span>updateGuards<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>guard <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                        guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

                <span class="token comment">// run the queue of per route beforeEnter guards</span>
                <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span> <span class="token comment">// ③ 调用 beforeRouteUpdate 钩子函数</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// check the route beforeEnter</span>
                guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> record <span class="token keyword">of</span> to<span class="token punctuation">.</span>matched<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// do not trigger beforeEnter on reused views // ④ 路由独享的守卫： route上的beforeEnter钩子函数</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>from<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> beforeEnter <span class="token keyword">of</span> record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">)</span>
                                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                            guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>beforeEnter<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

                <span class="token comment">// run the queue of per route beforeEnter guards</span>
                <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// NOTE: at this point to.matched is normalized and does not contain any () =&gt; Promise&lt;Component&gt;</span>

                <span class="token comment">// clear existing enterCallbacks, these are added by extractComponentsGuards</span>
                to<span class="token punctuation">.</span>matched<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>record <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

                <span class="token comment">// check in-component beforeRouteEnter</span>
                guards <span class="token operator">=</span> <span class="token function">extractComponentsGuards</span><span class="token punctuation">(</span>
                    enteringRecords<span class="token punctuation">,</span>
                    <span class="token string">&#39;beforeRouteEnter&#39;</span><span class="token punctuation">,</span>
                    to<span class="token punctuation">,</span>
                    from
                <span class="token punctuation">)</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

                <span class="token comment">// run the queue of per route beforeEnter guards</span>
                <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span> <span class="token comment">// ⑤ beforeRouteEnter 钩子</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token comment">// check global guards beforeResolve</span>
                guards <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> guard <span class="token keyword">of</span> beforeResolveGuards<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ⑥ beforeResolve 路由守卫</span>
                    guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>guard<span class="token punctuation">,</span> to<span class="token punctuation">,</span> from<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                guards<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>canceledNavigationCheck<span class="token punctuation">)</span>

                <span class="token keyword">return</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token punctuation">)</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token comment">// catch any navigation canceled</span>
            <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span>
                <span class="token function">isNavigationFailure</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_CANCELLED</span><span class="token punctuation">)</span>
                    <span class="token operator">?</span> err
                    <span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="runguardqueue方法" tabindex="-1"><a class="header-anchor" href="#runguardqueue方法" aria-hidden="true">#</a> <code>runGuardQueue</code>方法</h3><p><code>runGuardQueue</code> 通过数组的 <code>reduce</code> 方法，链式执行 <code>guard</code> 函数，每个 <code>guard</code> 函数都会返回一个 <code>Promise</code> 对象</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 *
 * <span class="token keyword">@param</span> <span class="token parameter">guards</span>
 * example: guards [ fn1, fn2 ]
 * promise.then( () =&gt; fn1() ).then( ()=&gt; fn2() )
 */</span>
<span class="token keyword">function</span> <span class="token function">runGuardQueue</span><span class="token punctuation">(</span>guards<span class="token operator">:</span> Lazy<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> guards<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>
        <span class="token punctuation">(</span>promise<span class="token punctuation">,</span> guard<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">guard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="guardtopromisefn方法" tabindex="-1"><a class="header-anchor" href="#guardtopromisefn方法" aria-hidden="true">#</a> <code>guardToPromiseFn</code>方法</h3><p>我们添加的导航守卫是一个普通函数，并不是一个返回 <code>Promise</code> 对象的函数，那是怎么做的呢？ 原来在把 <code>guard</code> 添加到 <code>guards</code> 数组前，都会执行 <code>guardToPromiseFn</code> 函数把普通函数 <code>Promise</code> 化 。<code>guardToPromiseFn</code> 函数返回一个新的函数，这个函数内部会执行 <code>guard</code> 函数。</p><p>这里我们要注意 <code>next</code> 方法的设计，当我们在导航守卫中执行 <code>next</code> 时，实际上就是执行这里定义的 <code>next</code> 函数。</p><p>在执行 <code>next</code> 函数时，如果不传参数，那么则直接 <code>resolve</code>，执行下一个导航守卫；如果参数是 <code>false</code>，则创建一个导航取消的错误 <code>reject</code> 出去；如果参数是一个 <code>Error</code> 实例，则直接执行 <code>reject</code>，并把错误传递出去；如果参数是一个路径对象，则创建一个导航重定向的错误传递出去。 有些时候我们写导航守卫不使用 <code>next</code> 函数，而是直接返回 <code>true</code> 或 <code>false</code>，这种情况则先执行如下代码：</p><p><code>guardCall = Promise.resolve(guardReturn)</code>;</p><p>把导航守卫的返回值 <code>Promise</code> 化，然后再执行 <code>guardCall.then(next)</code>，把导航守卫的返回值传给 <code>next</code> 函数。 当然，如果你在导航守卫中定义了第三个参数 <code>next</code> ，但是你没有在函数中调用它，这种情况也会报警告。</p><p><code>beforeRouteEnter</code> 导航守卫的 <code>next</code> 可以传入回调，当 <code>record</code> 存在的时候会给 <code>record</code> 上绑定 <code>enterCallbacks</code> 数组， 并将 <code>next</code> 回调函数 <code>push</code> 进去，并最终在 routerView 中通过 <code>watch</code> <code>[viewRef.value, matchedRouteRef.value, props.name]</code> 三个属性的变化来最终调用 <code>next</code> 的回调函数，并传入当前的 <code>instance</code> 实例</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
    guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
    to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
    from<span class="token operator">:</span> RouteLocationNormalizedLoaded
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
    guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
    to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
    from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
    record<span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">guardToPromiseFn</span><span class="token punctuation">(</span>
    guard<span class="token operator">:</span> NavigationGuard<span class="token punctuation">,</span>
    to<span class="token operator">:</span> RouteLocationNormalized<span class="token punctuation">,</span>
    from<span class="token operator">:</span> RouteLocationNormalizedLoaded<span class="token punctuation">,</span>
    record<span class="token operator">?</span><span class="token operator">:</span> RouteRecordNormalized<span class="token punctuation">,</span>
    name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place</span>
    <span class="token keyword">const</span> enterCallbackArray <span class="token operator">=</span>
        record <span class="token operator">&amp;&amp;</span>
        <span class="token comment">// name is defined if record is because of the function overload</span>
        <span class="token comment">// 注意这里，只有当 record 存在的时候才进行后续的赋值操作，给record上绑定 enterCallbacks 回调</span>
        <span class="token punctuation">(</span>record<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">=</span> record<span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
        <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> next<span class="token operator">:</span> <span class="token function-variable function">NavigationGuardNext</span> <span class="token operator">=</span> <span class="token punctuation">(</span>
                valid<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> RouteLocationRaw <span class="token operator">|</span> NavigationGuardNextCallback <span class="token operator">|</span> Error
            <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>
                        <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationFailure<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
                            ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_ABORTED</span><span class="token punctuation">,</span>
                            <span class="token punctuation">{</span>
                                from<span class="token punctuation">,</span>
                                to<span class="token punctuation">,</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>valid <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isRouteLocation</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">reject</span><span class="token punctuation">(</span>
                        <span class="token generic-function"><span class="token function">createRouterError</span><span class="token generic class-name"><span class="token operator">&lt;</span>NavigationRedirectError<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
                            ErrorTypes<span class="token punctuation">.</span><span class="token constant">NAVIGATION_GUARD_REDIRECT</span><span class="token punctuation">,</span>
                            <span class="token punctuation">{</span>
                                from<span class="token operator">:</span> to<span class="token punctuation">,</span>
                                to<span class="token operator">:</span> valid<span class="token punctuation">,</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">)</span>
                    <span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>
                        enterCallbackArray <span class="token operator">&amp;&amp;</span>
                        <span class="token comment">// since enterCallbackArray is truthy, both record and name also are</span>
                        record<span class="token operator">!</span><span class="token punctuation">.</span>enterCallbacks<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span> <span class="token operator">===</span> enterCallbackArray <span class="token operator">&amp;&amp;</span>
                        <span class="token keyword">typeof</span> valid <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span>
                    <span class="token punctuation">)</span>
                        enterCallbackArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>valid<span class="token punctuation">)</span>
                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// wrapping with Promise.resolve allows it to work with both async and sync guards</span>
            <span class="token keyword">const</span> guardReturn <span class="token operator">=</span> <span class="token function">guard</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
                record <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">.</span>instances<span class="token punctuation">[</span>name<span class="token operator">!</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next
            <span class="token punctuation">)</span>
            <span class="token keyword">let</span> guardCall <span class="token operator">=</span> <span class="token builtin">Promise</span><span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>guardReturn<span class="token punctuation">)</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>guard<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> guardCall <span class="token operator">=</span> guardCall<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
            guardCall<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> reference</h2>`,44),r={href:"https://sumygg.com/2021/05/11/vue-router-4-path-ranking/",target:"_blank",rel:"noopener noreferrer"},d={href:"https://reach.tech/router/ranking",target:"_blank",rel:"noopener noreferrer"},k={href:"https://paths.esm.dev/?p=AAMeJSyAwR4UbFDAFxAcAGAIJXMAAA..#",target:"_blank",rel:"noopener noreferrer"},v={href:"https://boychina.github.io/posts/2021-01-26-vue3-core-source-code-26",target:"_blank",rel:"noopener noreferrer"},m={href:"https://boychina.github.io/posts/2021-01-27-vue3-core-source-code-27",target:"_blank",rel:"noopener noreferrer"};function b(f,g){const s=o("ExternalLinkIcon");return p(),c("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("VueRouter4路由权重"),e(s)])]),n("li",null,[n("a",d,[a("Path Ranking"),e(s)])]),n("li",null,[n("a",k,[a("Path Ranker"),e(s)])]),n("li",null,[n("a",v,[a("VueRouter4 核心源码解读-上"),e(s)])]),n("li",null,[n("a",m,[a("VueRouter4 核心源码解读-下"),e(s)])])])])}const y=t(l,[["render",b],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/library/vueRouter4.html.vue"]]);export{y as default};
