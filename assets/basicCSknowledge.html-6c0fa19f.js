import{_ as o,o as n,c as t,a as e,b as s}from"./app-4d1d3ef4.js";const c={},i=e("h3",{id:"cs-ui",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#cs-ui","aria-hidden":"true"},"#"),s(" cs UI")],-1),a=e("p",null,[s("UI （user interface）,根据操作系统不同，会有不同的界面的开发方式。安卓、ios、windows 等都有各自的创建 ui 的库，但是更底层的绘图库却是有标准的：跨平台的绘图 api 接口标准 "),e("code",null,"OpenGL"),s(" 以及 windows 下的 "),e("code",null,"DirectX"),s("。")],-1),r=e("p",null,"因为各个操作系统绘制 ui 的方式不同，所以跨平台的绘制方案逐渐流行开来，也就是浏览器。基于浏览器服务器的软件架构叫做 B/S 架构，而基于客户端的叫做 C/S 架构。在一段时间内，B/S 架构的应用越来越多，C/S 架构的应用也更多的混合 B/S 的方案来实现。",-1),l=e("p",null,"为了节省成本，大家又摸索出了跨端引擎的方案，也就是说还是通过网页来写渲染和交互的逻辑，但是渲染用的 api 是由安卓、ios 分别实现，这样就实现了跨端的渲染，逻辑部分也是由 JS 来写，一些需要的设备能力 api 分别由安卓、ios 实现然后注入到 JS 引擎里。",-1),d=e("p",null,"和安卓、ios 的跨端方案逐渐流行一样，桌面端也出现了 electron 的方案，通过网页来渲染界面和写逻辑，需要用的 api 注入到 JS 引擎中，而且 electron 是直接把 Node.js 的 api 注入到了 JS 引擎中，在网页里实现一些原生功能的时候可以直接使用 Node.js 的 api，此外还有一些 api 是 elctron 额外注入的，比如剪贴板、电源监视器等。",-1),_=[i,a,r,l,d];function p(u,h){return n(),t("div",null,_)}const f=o(c,[["render",p],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/others/basicCSknowledge.html.vue"]]);export{f as default};
