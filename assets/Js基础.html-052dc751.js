import{_ as p,r as o,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-4d1d3ef4.js";const i={},u={id:"object-create-null",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#object-create-null","aria-hidden":"true"},"#",-1),d={href:"https://stackoverflow.com/questions/15518328/is-creating-js-object-with-object-createnull-the-same-as",target:"_blank",rel:"noopener noreferrer"},k=n("code",null,"Object.create(null)",-1),v=t("<p>A javascript object inherits from <code>Object</code> by default, unless you explicitly create it with <code>null</code> as its <code>prototype</code>, like: <code>Object.create(null)</code>. <code>{}</code> would instead be equivalent to <code>Object.create(Object.prototype)</code>. In Chrome Devtool you can see that <code>Object.create(null)</code> has no <code>__proto__</code> property, while <code>{}</code> does.</p>",1),m={id:"class",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#class","aria-hidden":"true"},"#",-1),g={href:"https://zh.javascript.info/class",target:"_blank",rel:"noopener noreferrer"},h=t(`<p>类初始化过程</p><ul><li>创建一个名为 <code>User</code> 的函数，该函数成为类声明的结果。该函数的代码来自于 <code>constructor</code> 方法（如果我们不编写这种方法，那么它就被假定为空）。</li><li>原型方法用于继承：存储类中的方法，例如 <code>User.prototype</code> 中的 <code>sayName</code>。</li><li>为每个实例创建的方法，原型链中不存在，使用箭头函数书写，可以防止 <code>this</code> 丢失的问题,例如 <code>sayAge</code> 方法.在这里对于每一个 <code>User</code> 对象都有一个独立的方法，在内部都有一个指向此对象的 <code>this</code></li><li>为每个实例创建 <code>类字段</code> 属性,存在于该实例上，原型链中不存在</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 类字段”是一种允许添加任何属性的语法</span>
    age <span class="token operator">=</span> <span class="token number">22</span>

    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 计算属性名称</span>
    <span class="token punctuation">[</span><span class="token string">&#39;say&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;Hi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Name is too short.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="nullish-coalescing-operator" tabindex="-1"><a class="header-anchor" href="#nullish-coalescing-operator" aria-hidden="true">#</a> Nullish coalescing operator (??)</h2><p>The nullish coalescing operator (<code>??</code>) is a logical operator that returns its right-hand side operand when its left-hand side operand is <code>null</code> or <code>undefined</code>, and otherwise returns its left-hand side operand.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">??</span> <span class="token string">&#39;default string&#39;</span><span class="token punctuation">;</span> <span class="token comment">// expected output: &quot;default string&quot;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">??</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// expected output: 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="数字转化-一元运算符" tabindex="-1"><a class="header-anchor" href="#数字转化-一元运算符" aria-hidden="true">#</a> 数字转化，一元运算符 <code>+</code></h2><p>一元运算符加号，或者说，加号 + 应用于单个值，对数字没有任何作用。但是如果运算元不是数字，加号 + 则会将其转化为数字。它的效果和 <code>Number(...)</code> 相同，但是更加简短。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 转化非数字</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0</span>
<span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token operator">+</span>apples <span class="token operator">+</span> <span class="token operator">+</span>oranges<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9),f={id:"赋值-运算符",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#赋值-运算符","aria-hidden":"true"},"#",-1),w={href:"https://zh.javascript.info/operators#fu-zhi-fan-hui-yi-ge-zhi",target:"_blank",rel:"noopener noreferrer"},j=n("code",null,"=",-1),x=t(`<p>在 JavaScript 中，所有运算符都会返回一个值。这对于 <code>+</code> 和 <code>-</code> 来说是显而易见的，但对于 <code>=</code> 来说也是如此。 语句 <code>x = value</code> 将值 <code>value</code> 写入 <code>x</code> 然后返回 <code>x</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">alert</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),_={id:"逗号运算符",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#逗号运算符","aria-hidden":"true"},"#",-1),T={href:"https://zh.javascript.info/operators#dou-hao-yun-suan-fu",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>逗号运算符能让我们处理多个语句，使用 , 将它们分开。每个语句都运行了，但是只有最后的语句的结果会被返回。 请注意逗号运算符的优先级非常低，比 <code>=</code> 还要低，因此下面的例子中圆括号非常重要。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7（3 + 4 的结果）</span>

<span class="token comment">// 有时候，人们会使用它把几个行为放在一行上来进行复杂的运算。</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> c <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> a <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),S={id:"值的比较",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#值的比较","aria-hidden":"true"},"#",-1),F={href:"https://zh.javascript.info/comparison",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>不同类型间的比较: 当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（<code>number</code>）再判定大小。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;2&#39; 会被转化为数字 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;01&#39;</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;01&#39; 会被转化为数字 1</span>
<span class="token comment">// 对于布尔类型值，true 会被转化为 1、false 转化为 0</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>普通的相等性检查 <code>==</code> 存在一个问题，它不能区分出 <code>0</code> 和 <code>false</code>,也同样无法区分<code>空字符串</code>和 <code>false</code>， 这是因为在比较不同类型的值时，处于相等判断符号 <code>==</code> 两侧的值会先被转化为数字。<code>空字符串</code> 和 <code>false</code> 也是如此，转化后它们都为数字 <code>0</code>。 因此实际运用中大多数使用严格相等运算符 <code>===</code> ，它在进行比较时不会做任何的类型转换。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="对-null-和-undefined-进行比较" tabindex="-1"><a class="header-anchor" href="#对-null-和-undefined-进行比较" aria-hidden="true">#</a> 对 <code>null</code> 和 <code>undefined</code> 进行比较</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true (非严格相等模式下两者相等)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当使用数学式或其他比较方法 &lt; &gt; &lt;= &gt;= 时： <code>null</code>/<code>undefined</code> 会被转化为数字：<code>null</code> 被转化为 <code>0</code>，<code>undefined</code> 被转化为 <code>NaN</code>。</p><h3 id="奇怪的结果-null-vs-0" tabindex="-1"><a class="header-anchor" href="#奇怪的结果-null-vs-0" aria-hidden="true">#</a> 奇怪的结果：<code>null</code> vs <code>0</code></h3><ul><li>相等性检查 <code>==</code> 和普通比较符 <code>&gt; &lt; &gt;= &lt;=</code> 的代码逻辑是相互独立的。进行值的比较时，<code>null</code> 会被转化为数字，因此它被转化为了 0.</li><li>另一方面，<code>undefined</code> 和 <code>null</code> 在相等性检查 <code>==</code> 中不会进行任何的类型转换，它们有自己独立的比较规则，所以除了它们之间互等外，不会等于任何其他的值。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (1) false</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2) false</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3) true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="特立独行的-undefined" tabindex="-1"><a class="header-anchor" href="#特立独行的-undefined" aria-hidden="true">#</a> 特立独行的 <code>undefined</code></h3><p>(1) 和 (2) 都返回 false 是因为 undefined 在比较中被转换为了 NaN，而 NaN 是一个特殊的数值型值，它与任何值进行比较都会返回 false。 (3) 返回 false 是因为这是一个相等性检查，而 <code>undefined</code> 只与 <code>null</code> 相等，不会与其他值相等</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (1)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (2)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="的非常规使用" tabindex="-1"><a class="header-anchor" href="#的非常规使用" aria-hidden="true">#</a> <code>?</code> 的非常规使用</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 问号 ? 的作用是根据条件返回一个或另一个值</span>
<span class="token comment">// 在这里我们不是把结果赋值给变量。而是根据条件执行不同的代码。</span>
<span class="token punctuation">(</span>company <span class="token operator">==</span> <span class="token string">&#39;Netscape&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Right!&#39;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Wrong.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="或运算寻找第一个真值" tabindex="-1"><a class="header-anchor" href="#或运算寻找第一个真值" aria-hidden="true">#</a> 或运算寻找第一个真值</h2><p>或运算符 || 做了如下的事情：</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止计算，返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code>），<strong>则返回最后一个操作数</strong>。</li></ul><p>返回的值是操作数的初始形式，不会做布尔转换。换句话说，一个或运算 <code>||</code> 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> value1 <span class="token operator">||</span> value2 <span class="token operator">||</span> value3<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0（都是假值，返回最后一个值）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>或运算符 <code>||</code> 的另一个用途是所谓的“短路求值”,人们利用这个特性，只在<strong>左侧的条件为假</strong>时才执行命令。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token boolean">true</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;not printed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个alert不会执行</span>
<span class="token boolean">false</span> <span class="token operator">||</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;printed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个alert会执行</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="与运算寻找第一个假值" tabindex="-1"><a class="header-anchor" href="#与运算寻找第一个假值" aria-hidden="true">#</a> 与运算寻找第一个假值</h2><p>与运算 &amp;&amp; 做了如下的事:</p><ul><li>从左到右依次计算操作数。</li><li>在处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>false</code>，就停止计算，并返回这个操作数的初始值。</li><li>如果所有的操作数都被计算过（例如都是真值），则返回最后一个操作数。</li></ul><p>换句话说，与运算返回第一个假值，如果没有假值就<strong>返回最后一个值</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> value1 <span class="token operator">&amp;&amp;</span> value2 <span class="token operator">&amp;&amp;</span> value3<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// null</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，最后一个值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与运算 <code>&amp;&amp;</code> 的优先级比或运算 <code>||</code> 要高。 所以代码 <code>a &amp;&amp; b || c &amp;&amp; d</code> 跟 <code>&amp;&amp;</code> 表达式加了括号完全一样：<code>(a &amp;&amp; b) || (c &amp;&amp; d)</code>。</p><h2 id="非" tabindex="-1"><a class="header-anchor" href="#非" aria-hidden="true">#</a> !（非）</h2><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型(它的作用和内建的 <code>Boolean</code> 函数作用是一样的). 第一个非运算将该值<strong>转化为布尔类型并取反</strong>，第二个非运算<strong>再次取反</strong>。最后我们就得到了一个任意值到布尔值的转化 非运算符 <code>!</code> 的优先级在所有逻辑运算符里面最高，所以它总是在 <code>&amp;&amp; 和 ||</code> 之前执行。</p><h2 id="vs" tabindex="-1"><a class="header-anchor" href="#vs" aria-hidden="true">#</a> <code>??</code> vs <code>||</code></h2><p><code>||</code> 返回第一个 <code>真</code> 值; <code>??</code> 返回第一个 <code>已定义的</code> 值。<code>||</code> 无法区分 <code>false</code>、<code>0</code>、<code>空字符串</code> 和 <code>null/undefined</code>。它们都一样 —— 假值（<code>falsy values</code>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// 高度 0 通常是一个有效值，它不应该被替换为默认值</span>
<span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">||</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100</span>
<span class="token function">alert</span><span class="token punctuation">(</span>height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="循环-while-和-for" tabindex="-1"><a class="header-anchor" href="#循环-while-和-for" aria-hidden="true">#</a> 循环：while 和 for</h2><h3 id="省略语句段" tabindex="-1"><a class="header-anchor" href="#省略语句段" aria-hidden="true">#</a> 省略语句段</h3><p>for 循环的任何语句段都可以被省略,例如，如果我们在循环开始时不需要做任何事，我们就可以省略 <code>begin</code> 语句段</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 我们已经声明了 i 并对它进行了赋值</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 不再需要 &quot;begin&quot; 语句段</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0, 1, 2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以移除 <code>step</code> 语句段：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上我们可以删除所有内容，从而创建一个无限循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 无限循环</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="break-continue-标签" tabindex="-1"><a class="header-anchor" href="#break-continue-标签" aria-hidden="true">#</a> break/continue 标签</h3><p>有时候我们需要一次从多层嵌套的循环中跳出来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">outer</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">let</span> input <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Value at coords (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>j<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果是空字符串或被取消，则中断并跳出这两个循环。执行 alert(&#39;Done!&#39;)</span>
        <span class="token comment">// 如果不加标签，则只能跳出内层循环</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>input<span class="token punctuation">)</span> <span class="token keyword">break</span> outer<span class="token punctuation">;</span> <span class="token comment">// (*)</span>

        <span class="token comment">// 用得到的值做些事……</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Done!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="前缀-vs-后置" tabindex="-1"><a class="header-anchor" href="#前缀-vs-后置" aria-hidden="true">#</a> 前缀 <code>++</code> vs 后置 <code>++</code></h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 前缀形式 ++i</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出从 1 到 4 (因为 ++i 首先递增 i 然后返回新值和5进行比较)</span>
<span class="token comment">// 后缀形式 i++</span>
<span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">++</span> <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 输出从 1 到 5 (后缀形式 i++ 递增 i 然后返回 旧 值和5进行比较）)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,46),P={id:"jsdoc",tabindex:"-1"},A=n("a",{class:"header-anchor",href:"#jsdoc","aria-hidden":"true"},"#",-1),O={href:"https://en.wikipedia.org/wiki/JSDoc",target:"_blank",rel:"noopener noreferrer"},E=n("code",null,"jsDoc",-1),H=t('<p>Tag Description</p><ul><li><code>@author</code> Developer&#39;s name</li><li><code>@constructor</code> Marks a function as a constructor</li><li><code>@deprecated</code> Marks a method as deprecated</li><li><code>@exception</code> Synonym for <code>@throws</code></li><li><code>@exports</code> Identifies a member that is exported by the module</li><li><code>@param</code> Documents a method parameter; a datatype indicator can be added between curly braces</li><li><code>@private</code> Signifies that a member is private</li><li><code>@returns</code> Documents a return value</li><li><code>@return</code> Synonym for <code>@returns</code></li><li><code>@see</code> Documents an association to another object</li><li><code>@todo</code> Documents something that is missing/open</li><li><code>@this</code> Specifies the type of the object to which the keyword this refers within a function.</li><li><code>@throws</code> Documents an exception thrown by a method</li><li><code>@version</code> Provides the version number of a library</li></ul><h2 id="transpilers-vs-polyfills" tabindex="-1"><a class="header-anchor" href="#transpilers-vs-polyfills" aria-hidden="true">#</a> <code>Transpilers</code> vs <code>Polyfills</code></h2><p>Babel 是最著名的转译器之一 两个有趣的 polyfill 库：</p>',4),D={href:"https://github.com/zloirock/core-js",target:"_blank",rel:"noopener noreferrer"},U={href:"https://polyfill.io/v3/",target:"_blank",rel:"noopener noreferrer"},B=t(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 在运行转译器之前</span>
height <span class="token operator">=</span> height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">// 在运行转译器之后</span>
height <span class="token operator">=</span> <span class="token punctuation">(</span>height <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> height <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> height <span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="对象" tabindex="-1"><a class="header-anchor" href="#对象" aria-hidden="true">#</a> 对象</h2><p>我们可以用下面两种语法中的任一种来创建一个空的对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// “构造函数” 的语法</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// “字面量” 的语法</span>
<span class="token comment">// 可以用多字词语来作为属性名，但必须给它们加上引号</span>
<span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;likes birds&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// 多词属性名必须加引号</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 以用 delete 操作符移除属性</span>
<span class="token keyword">delete</span> user1<span class="token punctuation">.</span>age
<span class="token comment">// 列表中的最后一个属性应以逗号结尾，这叫做尾随（trailing）或悬挂（hanging）逗号。这样便于我们添加、删除和移动属性</span>
<span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当创建一个对象时，我们可以在对象字面量中使用方括号。这叫做 <code>计算属性</code>。 当用其他类型作为属性名时候，属性名会被自动地转换为字符串例如，当<code>数字 0</code> 被用作对象的属性的键时，会被转换为<code>字符串 &quot;0&quot;</code></p><h3 id="属性存在性测试-in-操作符" tabindex="-1"><a class="header-anchor" href="#属性存在性测试-in-操作符" aria-hidden="true">#</a> 属性存在性测试，<code>“in”</code> 操作符</h3><p>语法： <code>&quot;key&quot; in object</code> , 请注意，in 的左边必须是 <code>属性名</code>。通常是<strong>一个带引号的字符串</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;age&quot;</span> <span class="token keyword">in</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了遍历一个对象的所有键（key），可以使用一个特殊形式的循环,<code>“for…in”</code> 循环</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> user<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// name, age, isAdmin</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象有顺序吗？换句话说，如果我们遍历一个对象，我们获取属性的顺序是和属性添加时的顺序相同吗？ 简短的回答是：<code>“有特别的顺序”</code>：<code>整数属性</code>会被进行排序，<code>其他属性</code>则按照创建的顺序显示</p><h2 id="promise" tabindex="-1"><a class="header-anchor" href="#promise" aria-hidden="true">#</a> Promise</h2><h3 id="thenables" tabindex="-1"><a class="header-anchor" href="#thenables" aria-hidden="true">#</a> Thenables</h3><p><strong>JavaScript引擎</strong> 检查在 <code>(*)</code> 行中由 <code>.then</code> 处理程序（<code>handler</code>）返回的对象：如果它具有名为 <code>then</code> 的可调用方法，那么它将调用该方法并提供 JavaScript 原生的函数 <code>resolve</code> 和 <code>reject</code> 作为参数（类似于 <code>executor</code>），并等待直到其中一个函数被调用。在上面的示例中，<code>resolve(2)</code> 在 1 秒后被调用 <code>(**)</code>。然后，<code>result</code> 会被进一步沿着链向下传递。</p><p>这个特性允许我们将自定义的对象与 <code>promise</code> 链集成在一起，而不必继承自 <code>Promise</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Thenable</span> <span class="token punctuation">{</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// function() { native code }</span>
        <span class="token comment">// 1 秒后使用 this.num*2 进行 resolve</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (**)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">result</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Thenable</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1000ms 后显示 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="continue-用法" tabindex="-1"><a class="header-anchor" href="#continue-用法" aria-hidden="true">#</a> continue 用法</h2><p><code>continue</code> 可以用于跳出 <code>for</code> | <code>for...in</code> | <code>for...of</code> 循环中符合条件的单次循环，进行下一次循环</p><h2 id="构造器和操作符-new" tabindex="-1"><a class="header-anchor" href="#构造器和操作符-new" aria-hidden="true">#</a> 构造器和操作符 <code>new</code></h2><p>构造函数在技术上是<strong>常规函数</strong>,不过有两个约定,它们的命名以大写字母开头;它们只能由 <code>new 操作符</code> 来执行。当一个函数被使用 new 操作符执行时:</p><ul><li>一个<strong>新的空对象</strong>被创建并分配给 <code>this</code>。</li><li>函数体执行。通常它会修改 <code>this</code>，为其添加新的属性。</li><li>返回 <code>this</code> 的值。</li></ul><p>构造器的主要目的就是， <strong>实现可重用的对象创建代码</strong>，从技术上讲，<strong>任何函数</strong>（除了箭头函数，它没有自己的 this）都可以用作构造器。即可以通过 <code>new</code> 来运行. 在一个函数内部，我们可以使用 <code>new.target</code> 属性来检查它是否被使用 <code>new</code> 进行调用了.</p><p>如下方法有时被用在库中以使语法更加灵活。这样人们在调用函数时，<strong>无论是否使用了</strong> <code>new</code>，程序都能工作</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 如果你没有通过 new 运行我,我会给你添加 new</span>
<span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">new</span><span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通常，构造器没有 <code>return</code> 语句。 但是，如果这有一个 <code>return</code> 语句,则</p><ul><li>如果 <code>return</code> 返回的是一个对象，则返回这个对象，而不是 <code>this</code>。</li><li>如果 <code>return</code> 返回的是一个原始类型，则忽略。</li></ul><p>顺便说一下，如果没有参数，我们<strong>可以省略 <code>new</code> 后的括号</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span> <span class="token comment">// &lt;-- 没有参数</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="可选链" tabindex="-1"><a class="header-anchor" href="#可选链" aria-hidden="true">#</a> 可选链</h2><p>如果可选链 <code>?.</code> 前面的值为 <code>undefined</code> 或者 <code>null</code>，它会停止运算并返回 <code>undefined</code>。注意<code>?.</code> 前的变量必须已声明</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// user 没有 address 属性</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token operator">?.</span>address<span class="token operator">?.</span>street<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined（不报错）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可选链 <code>?.</code> 不是一个运算符，而是一个特殊的语法结构。它还<strong>可以与函数和方括号一起使用</strong>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> userAdmin <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;I am admin&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> userGuest <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

userAdmin<span class="token punctuation">.</span>admin<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// I am admin</span>

userGuest<span class="token punctuation">.</span>admin<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 啥都没有（没有这样的方法,不会报错）</span>

<span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token string">&quot;firstName&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user1 <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> user2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user1<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user2<span class="token operator">?.</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// undefined</span>
<span class="token comment">// 我们还可以将 ?. 跟 delete 一起使用</span>
<span class="token keyword">delete</span> user<span class="token operator">?.</span>name<span class="token punctuation">;</span> <span class="token comment">// 如果 user 存在，则删除 user.name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可选链 <code>?.</code> 语法有三种形式</p><ul><li><code>obj?.prop</code> —— 如果 <code>obj</code> 存在则返回 <code>obj.prop</code>，否则返回 <code>undefined</code>。</li><li><code>obj?.[prop]</code> —— 如果 <code>obj</code> 存在则返回 <code>obj[prop]</code>，否则返回 <code>undefined</code>。</li><li><code>obj.method?.()</code> —— 如果 <code>obj.method</code> 存在则调用 <code>obj.method()</code>，否则返回 <code>undefined</code></li></ul><h2 id="对象包装器" tabindex="-1"><a class="header-anchor" href="#对象包装器" aria-hidden="true">#</a> 对象包装器</h2><p>人们可能想对诸如字符串或数字之类的原始类型执行很多操作。最好使用方法来访问它们,为了使它们起作用，创建了提供额外功能的特殊“<strong>对象包装器</strong>”，使用后即被销毁。</p><p>对象包装器对于每种原始类型都是不同的，它们被称为 <code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Symbol</code> 和 <code>BigInt</code> 以下是 <code>str.toUpperCase()</code> 中实际发生的情况：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// HELLO</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串 <code>str</code> 是一个原始值。因此，在访问其属性时，会创建一个<strong>包含字符串字面值的特殊对象</strong>，并且具有有用的方法，例如 <code>toUpperCase()</code>。 该方法运行并返回一个新的字符串（由 <code>alert</code> 显示）。 特殊对象被销毁，只留下原始值 <code>str</code>。JavaScript 引擎高度优化了这个过程。它甚至可能跳过创建额外的对象。但是它仍然必须遵守规范，并且表现得好像它创建了一样。</p><p>特殊的原始类型 <code>null</code> 和 <code>undefined</code> 是例外。它们没有对应的“对象包装器”，也没有提供任何方法。从某种意义上说，它们是“最原始的”。</p><p>我能为字符串添加一个属性吗？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>

str<span class="token punctuation">.</span>test <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据你是否开启了严格模式 <code>use strict</code>，会得到如下结果：</p><p>非严格模式 :undefined</p><p>严格模式:报错</p><p>为什么？让我们看看在 (*) 那一行到底发生了什么：</p><p>当访问 <code>str</code> 的属性时，一个“对象包装器”被创建了。 在严格模式下，向其写入内容会报错。 否则，将继续执行带有属性的操作，该对象将获得 <code>test</code> 属性，但是此后，“对象包装器”将消失，因此在最后一行，<code>str</code> 并没有该属性的踪迹。</p><h2 id="js-中数字的写法" tabindex="-1"><a class="header-anchor" href="#js-中数字的写法" aria-hidden="true">#</a> js 中数字的写法</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> billion <span class="token operator">=</span> <span class="token number">1000000000</span><span class="token punctuation">;</span>
<span class="token comment">// 也可以使用下划线 _ 作为分隔符</span>
<span class="token comment">// JavaScript 引擎会直接忽略数字之间的 _</span>
<span class="token keyword">let</span> billion <span class="token operator">=</span> <span class="token number">1_000_000_000</span><span class="token punctuation">;</span>
<span class="token comment">// 可以通过在数字后面附加字母 &quot;e&quot; 并指定零的个数来缩短数字</span>
<span class="token keyword">let</span> billion <span class="token operator">=</span> <span class="token number">1e9</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mcs <span class="token operator">=</span> <span class="token number">0.000001</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> mcs <span class="token operator">=</span> <span class="token number">1e-6</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>十六进制，二进制和八进制数字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0xff</span> <span class="token comment">// 十六进制的 255</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">0b11111111</span><span class="token punctuation">;</span> <span class="token comment">// 二进制形式的 255</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">0o377</span><span class="token punctuation">;</span> <span class="token comment">// 八进制形式的 255</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>toString(base)</code></p><p>方法 <code>num.toString(base)</code> 返回在给定 <code>base</code> 进制数字系统中 <code>num</code> 的字符串表示形式。<code>base</code> 的范围可以从 <code>2</code> 到 <code>36</code>。默认情况下是 <code>10</code> 当我们需要将一个较长的数字标识符转换成较短的时候，例如做一个短的 <code>URL</code>。可以简单地使用基数为 <code>36</code> 的数字系统表示</p><p><code>123456..toString(36)</code></p><p>使用<strong>两个点</strong>来调用一个方法</p><p>请注意 <code>123456..toString(36)</code> 中的<strong>两个点</strong>不是打错了。如果我们想直接在一个数字上调用一个方法，比如上面例子中的 <code>toString</code>，那么我们需要在它后面放置两个点<code>..</code>。 如果我们放置一个点：<code>123456.toString(36)</code>，那么就会出现一个 <code>error</code>，因为 JavaScript 语法<strong>隐含了第一个点之后的部分为小数部分</strong>。如果我们再放一个点，那么 JavaScript 就知道** 小数部分为空**，现在使用该方法。 也可以写成 <code>(123456).toString(36)</code>。</p><h3 id="不精确的计算" tabindex="-1"><a class="header-anchor" href="#不精确的计算" aria-hidden="true">#</a> 不精确的计算</h3><p>一个数字以其二进制的形式存储在内存中，一个 1 和 0 的序列。但是在十进制数字系统中看起来很简单的 <code>0.1，0.2</code> 这样的小数，实际上在二进制形式中是<strong>无限循环小数</strong>。 <code>0.1</code> 就是 <code>1</code> 除以 <code>10</code>，<code>1/10</code>，即十分之一。在十进制数字系统中，这样的数字表示起来很容易。 使用二进制数字系统无法 精确 存储 <code>0.1 或 0.2</code>，就像没有办法将三分之一存储为十进制小数一样. 不仅仅是 JavaScript ,许多其他编程语言也存在同样的问题。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">==</span> <span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0.1</span> <span class="token operator">+</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0.30000000000000004</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">9999999999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示 10000000000000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们能解决这个问题吗？当然，最可靠的方法是借助方法 <code>toFixed(n)</code> 对结果进行舍入,请注意，<code>toFixed</code> 总是返回一个字符串</p>`,61),$={id:"方法借用-method-borrowing",tabindex:"-1"},z=n("a",{class:"header-anchor",href:"#方法借用-method-borrowing","aria-hidden":"true"},"#",-1),C={href:"https://zh.javascript.info/call-apply-decorators#method-borrowing",target:"_blank",rel:"noopener noreferrer"},L=t(`<p>我们从常规数组 <code>[].join</code> 中获取（借用）<code>join</code> 方法，并使用 <code>[].join.call</code> 在 <code>arguments</code> 的上下文中运行它。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1,2</span>
<span class="token punctuation">}</span>

<span class="token function">hash</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它为什么有效？ 那是因为原生方法 <code>arr.join(glue)</code> 的内部算法非常简单。类似于调用 <code>[1,2,3].join()</code>,这里的 <code>this</code> 指向的是数组 <code>[1,2,3]</code>,所以方法借用中只需要指定 <code>this</code> 上下文即可, <code>join</code> 方法工作机制如下</p><ul><li>让 <code>glue</code> 成为第一个参数，如果没有参数，则使用逗号 &quot;,&quot;。</li><li>让 <code>result</code> 为空字符串。</li><li>将 <code>this[0]</code> 附加到 <code>result</code>。</li><li>附加 <code>glue</code> 和 <code>this[1]</code>。</li><li>附加 <code>glue</code> 和 <code>this[2]</code>。</li><li>……以此类推，直到 <code>this.length</code> 项目被粘在一起。</li><li>返回 <code>result</code></li></ul><p>因此，从技术上讲，<strong>它需要</strong> <code>this</code> 并将 <code>this[0]，this[1]</code> ……等 <code>join</code> 在一起。它的编写方式是故意允许任何类数组的 <code>this</code> 的（不是巧合，很多方法都遵循这种做法）。这就是为什么它也可以和 <code>this=arguments</code> 一起使用</p><h2 id="function-prototype-apply" tabindex="-1"><a class="header-anchor" href="#function-prototype-apply" aria-hidden="true">#</a> Function.prototype.apply</h2><p>用 <code>apply</code> 将数组各项添加到另一个数组 我们可以使用 <code>push</code> 将元素追加到数组中。由于 <code>push</code> 接受<strong>可变数量</strong>的参数，所以也可以一次追加多个元素。 但是，如果 <code>push</code> 的参数是数组，它会将该数组作为单个元素添加，而不是将这个数组内的每个元素添加进去，因此我们最终会得到一个数组内的数组。如果不想这样呢？<code>concat</code> 符合我们的需求，但它并不是将元素添加到现有数组，而是创建并返回一个新数组。 然而我们需要将元素追加到现有数组 ，这里<code>apply</code> 正派上用场！</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;a&quot;, &quot;b&quot;, 0, 1, 2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>apply</code> 接收的是一个数组或者类数组对象，但实际调用函数的时候是将数组或者类数组对象拆成逗号分割的参数传入方法中调用的， <code>Function.prototype.call</code> 则接收的是一组参数，调用的时候也是将其传入方法调用的，js内部对 <code>apply</code> 方法做了优化，同样的情况下，<code>apply</code> 性能比 <code>call</code> 好</p><p><code>apply</code> 用例</p><p><strong>间谍装饰器</strong>: 储存调用的参数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">spy</span><span class="token punctuation">(</span><span class="token parameter">func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        wrapper<span class="token punctuation">.</span>calls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    wrapper<span class="token punctuation">.</span>calls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> wrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>延时装饰器</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> delayTime</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里使用箭头函数来指向外层函数的this</span>
        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">,</span> delayTime<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>防抖装饰器</strong></p><p><code>debounce(f, ms)</code> 装饰器的结果是一个包装器，该包装器将暂停对 <code>f</code> 的调用，直到经过 <code>ms</code> 毫秒的非活动状态（没有函数调用，“冷却期”），然后使用最新的参数调用 <code>f</code> 一次。举个例子，我们有一个函数 <code>f</code>，并将其替换为 <code>f = debounce(f, 1000)</code>。 然后，如果包装函数分别在 <code>0ms、200ms 和 500ms</code> 时被调用了，之后没有其他调用，那么实际的 <code>f</code> 只会在 <code>1500ms</code> 时被调用一次。也就是说：从最后一次调用开始经过 <code>1000ms</code> 的冷却期之后。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> timeout<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeout<span class="token punctuation">)</span><span class="token punctuation">;</span>
        timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>节流装饰器</strong></p><p>创建一个“节流”装饰器 <code>throttle(f, ms)</code> —— 返回一个包装器。 当被多次调用时，它会在每 <code>ms</code> 毫秒最多将调用传递给 <code>f</code> 一次。<code>debounce</code> 会在 冷却（<code>cooldown</code>）期后运行函数一次。适用于处理最终结果。 <code>throttle</code> 运行函数的频率不会大于所给定的时间 <code>ms</code> 毫秒。适用于不应该经常进行的定期更新。 节流函数第一次会立即调用，后续调用会间隔给定时间再次调用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> ms</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">let</span> isThrottled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        savedArgs<span class="token punctuation">,</span>
        savedThis<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>isThrottled<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (2)</span>
            savedArgs <span class="token operator">=</span> arguments<span class="token punctuation">;</span>
            savedThis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        isThrottled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

        <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (1)</span>

        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isThrottled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// (3)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>savedArgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">wrapper</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>savedThis<span class="token punctuation">,</span> savedArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
                savedArgs <span class="token operator">=</span> savedThis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> wrapper<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 <code>throttle(func, ms)</code> 返回 <code>wrapper</code>。</p><ul><li>1.在第一次调用期间，<code>wrapper</code> 只运行 <code>func</code> 并设置冷却状态（<code>isThrottled = true</code>）。</li><li>2.在这种状态下，所有调用都记忆在 <code>savedArgs/savedThis</code> 中。请注意，上下文和参数（<code>arguments</code>）同等重要，应该被记下来。我们同时需要他们以重现调用。</li><li>3.然后经过 <code>ms</code> 毫秒后，触发 <code>setTimeout</code>。冷却状态被移除（<code>isThrottled = false</code>），如果我们忽略了调用，则将使用最后记忆的参数和上下文执行 <code>wrapper</code>。</li><li>4.第 3 步运行的不是 <code>func</code>，而是 <code>wrapper</code>，因为我们不仅需要执行 <code>func</code>，还需要再次进入冷却状态并设置 <code>timeout</code> 以重置它</li></ul><h2 id="递归和堆栈" tabindex="-1"><a class="header-anchor" href="#递归和堆栈" aria-hidden="true">#</a> 递归和堆栈</h2><p>最大的嵌套调用次数（包括首次）被称为 <strong>递归深度</strong></p><p>最大递归深度受限于 <code>JavaScript</code> 引擎。对我们来说，引擎在最大迭代深度为 <code>10000</code> 及以下时是<strong>可靠的</strong>，有些引擎可能允许更大的最大深度，但是对于大多数引擎来说，100000 可能就超出限制了。有一些自动优化能够帮助减轻这种情况（<code>尾部调用优化</code>），但目前它们还没有被完全支持，只能用于简单场景。</p><p>任何递归都可以用循环来重写。通常循环变体更有效。但有时重写很难，尤其是函数根据条件使用不同的子调用，然后合并它们的结果，或者分支比较复杂时。而且有些优化可能没有必要，完全不值得。递归可以使代码更短，更易于理解和维护。</p><p>斐波那契数 斐波那契数 序列有这样的公式： <code>Fn = Fn-1 + Fn-2</code>。换句话说，下一个数字是前两个数字的和。 编写一个函数 <code>fib(n)</code> 返回第 <code>n</code> 个斐波那契数,前两个数字都是 1</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 递归实现</span>
<span class="token keyword">function</span> <span class="token function">fib1</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> n <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// fib1(77); // 超级慢，不要尝试调用</span>
<span class="token comment">// 循环实现</span>
<span class="token keyword">function</span> <span class="token function">fib2</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
        a <span class="token operator">=</span> b<span class="token punctuation">;</span>
        b <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// fib2(77); // 很快</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28),R={href:"https://www.ruanyifeng.com/blog/2015/04/tail-call.html",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"tail call",-1),M=t('<p>尾调用的概念非常简单，一句话就能说清楚，就是指<strong>某个函数的最后一步是调用另一个函数</strong>。 递归非常耗费内存，因为需要同时保存成千上百个调用记录，很容易发生&quot;栈溢出&quot;错误（<code>stack overflow</code> ）。但对于尾递归来说，由于只存在一个调用记录，所以永远不会发生&quot;栈溢出&quot;错误。</p><h2 id="rest-参数" tabindex="-1"><a class="header-anchor" href="#rest-参数" aria-hidden="true">#</a> Rest 参数 <code>...</code></h2><p><code>Rest</code> 参数可以通过使用三个点 <code>...</code> 并在后面跟着包含剩余参数的数组名称，来将它们包含在函数定义中。这些点的字面意思是“<strong>将剩余参数收集到一个数组中</strong>”。<code>Rest</code> 参数必须放到参数列表的末尾</p><p><code>Spread</code> 语法看起来和 <code>rest</code> 参数很像，也使用 <code>...</code>，但是二者的用途完全相反</p><p>若 <code>...</code> 出现在函数参数列表的最后，那么它就是 <code>rest 参数</code>，它会把参数列表中剩余的参数收集到一个数组中。</p><p>若 <code>...</code> 出现在函数调用或类似的表达式中，那它就是 <code>spread 语法</code>，它会把一个数组展开为列表。</p>',6),G={id:"变量作用域-闭包",tabindex:"-1"},W=n("a",{class:"header-anchor",href:"#变量作用域-闭包","aria-hidden":"true"},"#",-1),K={href:"https://zh.javascript.info/closure#step-1-bian-liang",target:"_blank",rel:"noopener noreferrer"},Q=t(`<p>在 <code>JavaScript</code> 中，每个运行的函数，代码块 <code>{...}</code> 以及<strong>整个脚本</strong>，都有一个被称为 <strong>词法环境</strong>（Lexical Environment） 的内部（隐藏）的关联对象。词法环境对象由两部分组成：</p><ul><li>环境记录（Environment Record） —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 this 的值）的对象。</li><li>对 外部词法环境 的引用，与外部代码相关联。</li></ul><p>在一个函数运行时，在调用刚开始时，会自动创建一个新的词法环境以存储这个调用的局部变量和参数。在这个函数调用期间，我们有两个词法环境：内部一个（用于函数调用）和外部一个（全局） 当代码要访问一个变量时 —— 首先会搜索内部词法环境，然后搜索外部环境，然后搜索更外部的环境，以此类推，直到全局词法环境。</p><p>所有的函数在“诞生”时都会记住创建它们的词法环境。从技术上讲，这里没有什么魔法：所有函数都有名为 <code>[[Environment]]</code> 的隐藏属性，该属性保存了对创建该函数的词法环境的引用。</p><p>闭包：是指内部函数总是可以访问其所在的外部函数中声明的变量和参数，即使在其外部函数被返回（寿命终结）了之后。在某些编程语言中，这是不可能的，或者应该以特殊的方式编写函数来实现。在 JavaScript 中，所有函数都是天生闭包的（只有一个例外，将在 &quot;<code>new Function</code>&quot; 语法 中讲到）。 也就是说：JavaScript 中的函数会自动通过隐藏的 <code>[[Environment]]</code> 属性记住创建它们的位置，所以它们都可以访问外部变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">up</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">++</span>count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">down</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token operator">--</span>count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// undefined,new调用并不会生成 count 属性</span>
<span class="token function">alert</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1 ，counter.up函数生成时候在词法环境中保存了count</span>
<span class="token function">alert</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>counter<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>按字段排序</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> users <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Johnson&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Peterson&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Ann&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Hathaway&quot;</span><span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">byField</span><span class="token punctuation">(</span><span class="token parameter">fieldName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">[</span>fieldName<span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">byField</span><span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
users<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token function">byField</span><span class="token punctuation">(</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="旧时的-var" tabindex="-1"><a class="header-anchor" href="#旧时的-var" aria-hidden="true">#</a> 旧时的 &quot;<code>var</code>&quot;</h2><p>用 <code>var</code> 声明的变量，不是函数作用域就是全局作用域。它们在代码块外也是可见的（译注：也就是说，<code>var</code> 声明的变量只有函数作用域和全局作用域，没有块级作用域）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>

<span class="token function">alert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 10，&quot;i&quot; 在循环结束后仍可见，它是一个全局变量</span>
<span class="token function">alert</span><span class="token punctuation">(</span>one<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1，&quot;one&quot; 在循环结束后仍可见，它是一个全局变量</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>var</code> 声明会被提升，但是赋值不会。 声明在函数刚开始执行的时候（“提升”）就被处理了，但是赋值操作始终是在它出现的地方才起作用</p><p>在浏览器中，使用 <code>var</code>（而不是 <code>let/const</code>！）声明的全局函数和变量会<strong>成为全局对象的属性</strong></p><p><code>IIFE</code></p><p>在之前，JavaScript 中只有 <code>var</code> 这一种声明变量的方式，并且这种方式声明的变量没有块级作用域，程序员们就发明了一种模仿块级作用域的方法。这种方法被称为“立即调用函数表达式”（<code>immediately-invoked function expressions，IIFE</code>）。 请再注意一下：如今我们没有理由来编写这样的代码。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 创建 IIFE 的方法</span>
<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Parentheses around the function&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Parentheses around the whole thing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">!</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Bitwise NOT operator starts the expression&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">+</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Unary plus starts the expression&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数对象" tabindex="-1"><a class="header-anchor" href="#函数对象" aria-hidden="true">#</a> 函数对象</h2><p>一个容易理解的方式是把函数想象成可被调用的“行为对象（<code>action object</code>）”。我们不仅可以调用它们，还能把它们当作对象来处理：增/删属性，按引用传递等。</p><ul><li>属性 “name” 函数对象包含一些便于使用的属性。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">alert</span><span class="token punctuation">(</span>sayHi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// sayHi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>属性 “<code>length</code>” 还有另一个内建属性 “<code>length</code>”，它返回函数入参的个数, 但是注意 <code>rest</code> 参数不参与计数</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">many</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token operator">...</span>more</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>

<span class="token function">alert</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span>many<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种特别的情况就是所谓的 <strong>多态性</strong> —— 根据参数的类型，或者根据在我们的具体情景下的 <code>length</code> 来做不同的处理。这种思想在 JavaScript 的库里有应用。</p><p><strong>命名函数表达式</strong> 命名函数表达式（NFE，<code>Named Function Expression</code>），指<strong>带有名字的函数表达式</strong>的术语。它仍然是一个函数表达式。在 <code>function</code> 后面加一个名字 &quot;<code>func</code>&quot; 没有使它成为一个函数声明，因为它仍然是作为赋值表达式中的一部分被创建的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 普通的函数表达式</span>
<span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">// 添加一个名字</span>
<span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加它的原因：</p><ul><li>它允许函数在内部引用自己。</li><li>它在函数外是不可见的。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token parameter">who</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>who<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>who<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">func</span><span class="token punctuation">(</span><span class="token string">&quot;Guest&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用 func 再次调用函数自身</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Error, func is not defined（在函数外不可见）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="new-function-语法" tabindex="-1"><a class="header-anchor" href="#new-function-语法" aria-hidden="true">#</a> <code>new Function</code> 语法</h2><p><code>let func = new Function ([arg1, arg2, ...argN], functionBody)</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 这三种变体语法形式也是可以的</span>
<span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 基础语法</span>
<span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a,b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逗号分隔</span>
<span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a , b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 逗号和空格分隔</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数是通过使用参数 <code>arg1...argN</code> 和给定的 <code>functionBody</code> 创建的,与我们已知的其他方法相比，这种方法最大的不同在于，它实际上是通过运行时通过<strong>参数传递过来的字符串</strong>创建的,以前的所有声明方法都需要 —— 程序员，在脚本中编写函数的代码。 但是 <code>new Function</code> 允许我们将任意字符串变为函数。例如，我们<strong>可以从服务器接收一个新的函数并执行它</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">动态地接收来自服务器的代码</span><span class="token template-punctuation string">\`</span></span>
<span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>new Function</code> 创建函数的应用场景非常特殊，比如在复杂的 Web 应用程序中，我们需要从服务器获取代码或者动态地从<strong>模板编译函数</strong>时才会使用</p><p>通常，闭包是指使用一个特殊的属性 <code>[[Environment]]</code> 来记录函数自身的创建时的环境的函数。它具体指向了函数创建时的词法环境。 但是如果我们使用 new Function 创建一个函数，那么该函数的 <code>[[Environment]]</code> 并不指向当前的词法环境，而是指向<strong>全局环境</strong>。 因此，此类函数无法访问外部（<code>outer</code>）变量，只能访问全局变量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token string">&quot;test&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;alert(value)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// let func = function() { alert(value); }; //如果这样写就可以访问</span>

    <span class="token keyword">return</span> func<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">getFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error: value is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="调度-settimeout-和-setinterval" tabindex="-1"><a class="header-anchor" href="#调度-settimeout-和-setinterval" aria-hidden="true">#</a> 调度：setTimeout 和 setInterval</h2><p><code>let timerId = setTimeout(func|code, [delay], [arg1], [arg2], ...)</code></p><p><code>let timerId = setInterval(func|code, [delay], [arg1], [arg2], ...)</code></p><p><code>func|code</code> 想要执行的函数或代码字符串。 一般传入的都是函数。由于某些历史原因，支持传入代码字符串，但是不建议这样做。</p><p>浏览器中的 <code>setTimeout</code> 方法有些特殊：它为函数调用设定了 <code>this=window</code>（注意 <code>this</code> 丢失的问题）</p><p>嵌套的 <code>setTimeout</code></p><p>周期性调度有两种方式。一种是使用 <code>setInterval</code>，另外一种就是嵌套的 <code>setTimeout</code> 。 嵌套的 <code>setTimeout</code> 能够精确地设置两次执行之间的延时，而 <code>setInterval</code> 却不能。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">tick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;tick&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>tick<span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (*)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嵌套的 <code>setTimeout</code> 要比 <code>setInterval</code> 灵活得多。采用这种方式可以根据当前执行结果来调度下一次调用，因此下一次调用可以与当前这一次不同</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> delay <span class="token operator">=</span> <span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...发送请求...</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">request failed due to server overload</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 下一次执行的间隔是当前的 2 倍</span>
        delay <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>setInterval</code> 时，<code>func</code> 函数的实际调用间隔要比代码中设定的时间间隔要短！<strong>这也是正常的</strong>，因为 <code>func</code> 的执行所花费的时间“消耗”了一部分间隔时间。假如时间间隔是 100ms ,也可能出现这种情况，就是 <code>func</code> 的执行所花费的时间比我们预期的时间更长，并且超出了 100 毫秒。 在这种情况下，JavaScript 引擎会等待 <code>func</code> 执行完成，然后检查调度程序，如果时间到了，则 <strong>立即</strong> 再次执行它。极端情况下，如果函数每次执行时间都超过 <code>delay</code> 设置的时间，那么每次调用之间将完全没有停顿。</p><p>嵌套的 <code>setTimeout</code> 就能确保延时的固定,不会出现上述情况</p><p>零延时的 <code>setTimeout</code></p><p>这儿有一种特殊的用法：<code>setTimeout(func, 0)</code>，或者仅仅是 <code>setTimeout(func)</code>。</p><p>这样调度可以让 <code>func</code> 尽快执行。但是只有在当前正在执行的脚本执行完成后，调度程序才会调用它。 也就是说，该函数被调度在当前脚本执行完成“之后”立即执行。</p><h2 id="偏函数-partial-functions" tabindex="-1"><a class="header-anchor" href="#偏函数-partial-functions" aria-hidden="true">#</a> 偏函数（Partial functions）</h2><p>偏函数 : 我们通过绑定先有函数的一些参数来创建一个新函数。为什么我们通常会创建一个偏函数？</p><p>好处是我们可以创建一个具有可读性高的名字（<code>double，triple</code>）的独立函数。我们可以使用它，并且不必每次都提供一个参数，因为参数是被绑定了的。</p><p><code>Function.prototype.bind</code> 不仅可以绑定 this, 还可以绑定 函数参数,<code>bind</code> 的完整语法如下:</p><p><code>let bound = func.bind(context, [arg1], [arg2], ...)</code></p><p>虽然很少这么做，但有时它可以派上用场。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">mul</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> double <span class="token operator">=</span> <span class="token function">mul</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = mul(2, 3) = 6</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 <code>mul.bind(null, 2)</code> 的调用创建了一个新函数 <code>double</code>，它将调用传递到 <code>mul</code>，将 <code>null</code> 绑定为上下文，并将 <code>2</code> 绑定为第一个参数。并且，参数（<code>arguments</code>）均被“原样”传递。</p><p>又一个偏函数的实现（<strong>在没有上下文情况下的 partial</strong>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">partial</span><span class="token punctuation">(</span><span class="token parameter">func<span class="token punctuation">,</span> <span class="token operator">...</span>argsBound</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// (*)</span>
        <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token operator">...</span>argsBound<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 用法：</span>
<span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token function">say</span><span class="token punctuation">(</span><span class="token parameter">time<span class="token punctuation">,</span> phrase</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>phrase<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 为user添加一个带有绑定时间的 sayNow 偏函数方法</span>
user<span class="token punctuation">.</span>sayNow <span class="token operator">=</span> <span class="token function">partial</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>say<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;:&#39;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span><span class="token function">sayNow</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 类似于这样的一些内容：</span>
<span class="token comment">// [10:00] John: Hello!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一个函数不能被重绑定（<code>re-bound</code>）</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

f <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Ann&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// John</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>箭头函数 VS <code>bind</code></strong></p><p>箭头函数 <code>=&gt;</code> 和使用 <code>.bind(this)</code> 调用的常规函数之间有细微的差别：</p><ul><li><code>.bind(this)</code> 创建了一个该函数的“绑定版本”。</li><li>箭头函数 <code>=&gt;</code> 没有创建任何绑定。箭头函数只是没有 <code>this</code>。<code>this</code> 的查找与常规变量的搜索方式完全相同：在外部词法环境中查找。</li></ul><h2 id="属性标志和属性描述符" tabindex="-1"><a class="header-anchor" href="#属性标志和属性描述符" aria-hidden="true">#</a> 属性标志和属性描述符</h2><p>对象属性（<code>properties</code>），除 <code>value</code> 外，还有三个特殊的特性（<code>attributes</code>），也就是所谓的“标志”：</p><ul><li><code>writable</code> — 如果为 <code>true</code>，则值可以被修改，否则它是只可读的。</li><li><code>enumerable</code> — 如果为 <code>true</code>，则会被在循环中列出，否则不会被列出。</li><li><code>configurable</code> — 如果为 <code>true</code>，则此属性可以被删除，这些特性也可以被修改，否则不可以。</li></ul><p>当我们用“常用的方式”创建一个属性时，它们都为 <code>true</code>。但我们也可以随时更改它们。<code>Object.getOwnPropertyDescriptor</code> 方法允许查询有关属性的 完整 信息</p><p><code>let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName)</code></p><p>为了修改标志，我们可以使用</p><p><code>Object.defineProperty(obj, propertyName, descriptor)</code></p><p>如下例子中，只在严格模式下会出现 <code>Errors</code> 在非严格模式下，在对不可写的属性等进行写入操作时，不会出现错误。但是操作仍然不会成功。在非严格模式下，违反标志的行为（<code>flag-violating action</code>）只会被默默地忽略掉</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">;</span> <span class="token comment">// Error: Cannot assign to read only property &#39;name&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不可配置标志（<code>configurable:false</code>）有时会预设在内建对象和属性中,比如， 开发人员无法修改 <code>Math.PI</code>的值或覆盖它; 请注意：<code>configurable: false</code> 防止<strong>更改和删除</strong> 属性标志，但是允许更改对象的值(<code>value</code>属性)。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">configurable</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Pete&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 正常工作</span>
<span class="token keyword">delete</span> user<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// Error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要一次获取所有属性描述符，我们可以使用<code> Object.getOwnPropertyDescriptors(obj)</code> 方法。 有一个方法 <code>Object.defineProperties(obj, descriptors)</code> ，允许一次定义多个属性。</p><h2 id="对象属性的-getter-和-setter" tabindex="-1"><a class="header-anchor" href="#对象属性的-getter-和-setter" aria-hidden="true">#</a> 对象属性的 <code>getter</code> 和 <code>setter</code></h2><p><strong>访问器属性</strong>（<code>accessor properties</code>）。它们本质上是用于获取和设置值的函数，但从外部代码来看就像常规属性。访问器属性由 <code>getter</code> 和 <code>setter</code> 方法表示。在对象字面量中，它们用 <code>get</code> 和 <code>set</code> 表示</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span><span class="token punctuation">,</span>

    <span class="token keyword">get</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token keyword">set</span> <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
user<span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">&quot;Alice Cooper&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Cooper</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>访问器属性的<strong>描述符</strong>与数据属性的不同,对于访问器属性，没有 <code>value</code> 和 <code>writable</code>，但是有 <code>get</code> 和 <code>set</code> 函数。所以访问器描述符可能有：</p><ul><li><code>get</code> —— 一个没有参数的函数，在读取属性时工作.</li><li><code>set</code> —— 带有一个参数的函数，当属性被设置时调用.</li><li><code>enumerable</code> —— 与数据属性的相同.</li><li><code>configurable</code> —— 与数据属性的相同.</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">surname</span><span class="token operator">:</span> <span class="token string">&quot;Smith&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span> <span class="token string">&#39;fullName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，一个属性要么是访问器（具有 <code>get/set</code> 方法），要么是数据属性（具有 <code>value</code>），但不能两者都是</p>`,85),X={id:"创建包含n个空对象的数组",tabindex:"-1"},Y=n("a",{class:"header-anchor",href:"#创建包含n个空对象的数组","aria-hidden":"true"},"#",-1),Z={href:"https://juejin.cn/post/6844903764516667405",target:"_blank",rel:"noopener noreferrer"},nn=t(`<div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token comment">// 注意：这种创建出来的 students 共享一个对象</span>
<span class="token keyword">const</span> students1 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// students2 是 [ &lt;3 empty items&gt; ]</span>
<span class="token comment">// 对于数组中并不存在的单元, map() 也是束手无策</span>
<span class="token keyword">const</span> students2 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 下面这两种写法可以</span>
<span class="token keyword">const</span> students3 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> students4 <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>length<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function sn(an,en){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("h2",u,[r,s(),n("a",d,[k,e(a)])]),v,n("h2",m,[b,s(),n("a",g,[s("class"),e(a)])]),h,n("h2",f,[y,s(),n("a",w,[s("赋值 "),j,s(" 运算符"),e(a)])]),x,n("h2",_,[q,s(),n("a",T,[s("逗号运算符"),e(a)])]),N,n("h2",S,[J,s(),n("a",F,[s("值的比较"),e(a)])]),I,n("h2",P,[A,s(),n("a",O,[E,e(a)])]),H,n("ul",null,[n("li",null,[n("a",D,[s("core js"),e(a)]),s(" 支持了很多特性，允许只包含需要的特性。")]),n("li",null,[n("a",U,[s("polyfill.io"),e(a)]),s(" 提供带有 polyfill 的脚本的服务，具体取决于特性和用户的浏览器。")])]),B,n("h2",$,[z,s(),n("a",C,[s("方法借用-method borrowing"),e(a)])]),L,n("p",null,[n("a",R,[s("尾调用（"),V,s("）”优化"),e(a)])]),M,n("h2",G,[W,s(),n("a",K,[s("变量作用域，闭包"),e(a)])]),Q,n("h2",X,[Y,s(),n("a",Z,[s("创建包含N个空对象的数组"),e(a)])]),nn])}const pn=p(i,[["render",sn],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/js_basic/Js基础.html.vue"]]);export{pn as default};
