import{_ as p,r as o,o as c,c as i,a as n,d as e,b as s,e as t}from"./app-4d1d3ef4.js";const l={},u=n("h2",{id:"directives-utils",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#directives-utils","aria-hidden":"true"},"#"),s(" directives utils")],-1),r=n("h3",{id:"repeat-click-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#repeat-click-js","aria-hidden":"true"},"#"),s(" repeat-click.js")],-1),d=n("p",null,[s("在 "),n("code",null,"input-number"),s(" 组件中有应用 "),n("code",null,"v-repeat-click"),s(",当长按加或减时候，会持续调用绑定的函数")],-1),k={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/button",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"MouseEvent.button",-1),v=n("h3",{id:"mousewheel-js",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mousewheel-js","aria-hidden":"true"},"#"),s(" mousewheel.js")],-1),h={href:"https://github.com/basilfx/normalize-wheel",target:"_blank",rel:"noopener noreferrer"},b=n("code",null,"normalize-wheel",-1),f=t(`<blockquote><p>If you need to react to the mouse wheel in a predictable way, this code is like your bestest friend. As of today, there are 4 DOM event types you can listen to:</p><p>&#39;wheel&#39; -- Chrome(31+), FF(17+), IE(9+)</p><p>&#39;mousewheel&#39; -- Chrome, IE(6+), Opera, Safari</p><p>&#39;MozMousePixelScroll&#39; -- FF(3.5 only!) (2010-2013) -- don&#39;t bother!</p><p>&#39;DOMMouseScroll&#39; -- FF(0.9.7+) since 2003</p></blockquote><blockquote><p>In your event callback, use this code to get sane interpretation of the deltas. This code will return an object with 4 properties:</p><p>spinX -- normalized spin speed (use for zoom) - x plane</p><p>spinY -- &quot; - y plane</p><p>pixelX -- normalized distance (to pixels) - x plane</p><p>pixelY -- &quot; - y plane</p></blockquote><p>fireFox 中监听的是 <code>DOMMouseScroll</code> 事件，其他浏览器中监听的是 <code>mousewheel</code>事件， v-mousewheel在table组件中有所使用</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> normalizeWheel <span class="token keyword">from</span> <span class="token string">&#39;normalize-wheel&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isFirefox <span class="token operator">=</span> <span class="token keyword">typeof</span> navigator <span class="token operator">!==</span> <span class="token string">&#39;undefined&#39;</span> <span class="token operator">&amp;&amp;</span> navigator<span class="token punctuation">.</span>userAgent<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;firefox&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">mousewheel</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>element <span class="token operator">&amp;&amp;</span> element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>isFirefox <span class="token operator">?</span> <span class="token string">&#39;DOMMouseScroll&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;mousewheel&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> normalized <span class="token operator">=</span> <span class="token function">normalizeWheel</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
            callback <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>event<span class="token punctuation">,</span> normalized<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="clickoutside-js" tabindex="-1"><a class="header-anchor" href="#clickoutside-js" aria-hidden="true">#</a> clickoutside.js</h3><p><code>v-clickoutside</code> 在element中应用很广泛，以 <code>&lt;el-color-picker /&gt;</code> 组件为例，当组件挂载的时候，<code>clickoutside.js</code> 模块会将使用 <code>v-clickoutside</code> 指令的dom元素保存到<code>nodeList</code> 变量中，并且在该 <code>dom</code> 元素中绑定属性为 <code>@@clickoutsideContext</code> 的对象，该对象上绑定了3个重要的属性</p><ul><li><code>documentHandler</code>: 当 document <code>mouseup</code> 事件触发时，nodeList会循环触发所有绑定<code>v-clickoutside</code>指令所在dom元素上的 <code>documentHandler</code> 函数， 并且判断当前mouse事件是否作用于 dom 元素的内部还是外部，当作用于dom外部的时候，会执行 <code>v-clickoutside</code> 绑定的函数，该函数执行的时候会传入两个事件对象 <code>mouseup</code> 和 <code>mousedown</code></li><li><code>methodName</code>: <code>v-clickoutside</code> 指令绑定的函数名,可以通过 <code>vnode.context[el[ctx].methodName]()</code> 调用</li><li><code>bindingFn</code>: <code>v-clickoutside</code> 指令绑定的函数对象，可以通过 <code>el[ctx].bindingFn()</code> 直接调用</li></ul><p>当前dom元素包含或者就是点击的元素时候，判定位作用于当前dom上</p><p><code>el.contains(mouseup.target) || el.contains(mousedown.target) || el === mouseup.target</code></p><p>当前vue实例存在popperElm(弹出层) <code>(vnode.context.popperElm &amp;&amp; (vnode.context.popperElm.contains(mouseup.target) || vnode.context.popperElm.contains( mousedown.target)))</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// clickoutside.js</span>
<span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>on<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;element-ui/src/utils/dom&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nodeList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token string">&#39;@@clickoutsideContext&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> startClick<span class="token punctuation">;</span>
<span class="token keyword">let</span> seed <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token operator">!</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$isServer <span class="token operator">&amp;&amp;</span> <span class="token function">on</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">&#39;mousedown&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>startClick <span class="token operator">=</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">!</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$isServer <span class="token operator">&amp;&amp;</span> <span class="token function">on</span><span class="token punctuation">(</span>document<span class="token punctuation">,</span> <span class="token string">&#39;mouseup&#39;</span><span class="token punctuation">,</span> <span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    nodeList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=&gt;</span> node<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">documentHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> startClick<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">createDocumentHandler</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">mouseup <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> mousedown <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// vnode.context 是 Vue组件实例</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>vnode <span class="token operator">||</span>
            <span class="token operator">!</span>vnode<span class="token punctuation">.</span>context <span class="token operator">||</span>
            <span class="token operator">!</span>mouseup<span class="token punctuation">.</span>target <span class="token operator">||</span>
            <span class="token operator">!</span>mousedown<span class="token punctuation">.</span>target <span class="token operator">||</span>
            el<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mouseup<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">||</span>
            el<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mousedown<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">||</span>
            el <span class="token operator">===</span> mouseup<span class="token punctuation">.</span>target <span class="token operator">||</span>
            <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>popperElm <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>popperElm<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mouseup<span class="token punctuation">.</span>target<span class="token punctuation">)</span> <span class="token operator">||</span>
                    vnode<span class="token punctuation">.</span>context<span class="token punctuation">.</span>popperElm<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>mousedown<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>binding<span class="token punctuation">.</span>expression <span class="token operator">&amp;&amp;</span>
            el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>methodName <span class="token operator">&amp;&amp;</span>
            vnode<span class="token punctuation">.</span>context<span class="token punctuation">[</span>el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>methodName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            vnode<span class="token punctuation">.</span>context<span class="token punctuation">[</span>el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>methodName<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>bindingFn <span class="token operator">&amp;&amp;</span> el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">bindingFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * v-clickoutside
 * <span class="token keyword">@desc</span> 点击元素外面才会触发的事件
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token function">bind</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        nodeList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">const</span> id <span class="token operator">=</span> seed<span class="token operator">++</span><span class="token punctuation">;</span>
        el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
            id<span class="token punctuation">,</span>
            <span class="token literal-property property">documentHandler</span><span class="token operator">:</span> <span class="token function">createDocumentHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token literal-property property">methodName</span><span class="token operator">:</span> binding<span class="token punctuation">.</span>expression<span class="token punctuation">,</span>
            <span class="token literal-property property">bindingFn</span><span class="token operator">:</span> binding<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">update</span><span class="token punctuation">(</span><span class="token parameter">el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>documentHandler <span class="token operator">=</span> <span class="token function">createDocumentHandler</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span><span class="token punctuation">;</span>
        el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>methodName <span class="token operator">=</span> binding<span class="token punctuation">.</span>expression<span class="token punctuation">;</span>
        el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>bindingFn <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token function">unbind</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> len <span class="token operator">=</span> nodeList<span class="token punctuation">.</span>length<span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nodeList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">===</span> el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                nodeList<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">delete</span> el<span class="token punctuation">[</span>ctx<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mixins" tabindex="-1"><a class="header-anchor" href="#mixins" aria-hidden="true">#</a> mixins</h2><h3 id="emitter-js" tabindex="-1"><a class="header-anchor" href="#emitter-js" aria-hidden="true">#</a> emitter.js</h3><ul><li><code>dispatch</code>方法：通过 <code>componentName</code> 向上搜索 parent component，并触发父组件上的 event</li><li><code>broadcast</code>方法：通过 <code>componentName</code> 向下搜索 children component，并触发子组件上的 event</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;ElFormItem&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;el.form.change&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span><span class="token string">&#39;ElSelectDropdown&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;updatePopper&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="transitions" tabindex="-1"><a class="header-anchor" href="#transitions" aria-hidden="true">#</a> transitions</h2><h3 id="collapse-transition-js" tabindex="-1"><a class="header-anchor" href="#collapse-transition-js" aria-hidden="true">#</a> collapse-transition.js</h3>`,17),g=n("code",null,"ElCollapseTransition",-1),w=n("code",null,"render",-1),y={href:"https://cn.vuejs.org/v2/api/#transition",target:"_blank",rel:"noopener noreferrer"},x=n("code",null,"transition",-1),j=n("code",null,"height",-1),_=n("code",null,"Collapse 折叠面板",-1),z=t(`<p><code>return h(&#39;transition&#39;, data, children)</code></p><p><code>&lt;transition&gt;</code> 元素作为单个元素/组件的过渡效果。<code>&lt;transition&gt;</code> 只会把过渡效果应用到其包裹的内容上，而不会额外渲染 DOM 元素，也不会出现在可被检查的组件层级中</p><h2 id="utils" tabindex="-1"><a class="header-anchor" href="#utils" aria-hidden="true">#</a> utils</h2><h3 id="after-leave-js" tabindex="-1"><a class="header-anchor" href="#after-leave-js" aria-hidden="true">#</a> after-leave.js</h3><p>这是一个兼容性工具函数，有的浏览器当前组件上的 <code>after-leave</code> 事件不会触发，after-leave.js会在当vue组件前实例上再次绑定一个 <code>after-leave</code> 事件，绑定完成之后默认400ms之后会执行绑定的回调函数，在element loading组件中有所使用，loading组件最外层是一个 <code>transition</code> 组件,当过渡完成之后，transition组件会触发当前loading组件上的<code>after-leave</code> 事件，但是在某些浏览器下可能会失效，则400ms之后回调函数也会执行，如果两者都发生了调用，after-leave.js中的 <code>called</code> 标记会保证回调只执行一次</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!--loading组件中的 after-leave 事件的触发--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transition</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>el-loading-fade<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@after-leave</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>handleAfterLeave<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transition</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">handleAfterLeave</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;after-leave&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="date-js-date-util-js" tabindex="-1"><a class="header-anchor" href="#date-js-date-util-js" aria-hidden="true">#</a> date.js &amp;&amp; date-util.js</h3>`,7),E={href:"https://github.com/taylorhakes/fecha",target:"_blank",rel:"noopener noreferrer"},C=n("strong",null,"moment.js",-1),L=n("p",null,[s("date.util.js is for "),n("strong",null,"date-picker"),s(" component, which include some useful functions for date operation.")],-1),M={href:"https://stackoverflow.com/questions/3674539/incrementing-a-date-in-javascript",target:"_blank",rel:"noopener noreferrer"},T=t('<h3 id="dom-js" tabindex="-1"><a class="header-anchor" href="#dom-js" aria-hidden="true">#</a> dom.js</h3><ul><li>on</li><li>off</li><li>once</li><li>hasClass</li><li>addClass</li><li>removeClass</li><li>getStyle</li><li>setStyle</li><li>isScroll</li><li>getScrollContainer</li><li>isInContainer</li></ul><h3 id="popper-js-vue-popper-js-utils-popup-popup-manager-js-utils-popup-index-js" tabindex="-1"><a class="header-anchor" href="#popper-js-vue-popper-js-utils-popup-popup-manager-js-utils-popup-index-js" aria-hidden="true">#</a> popper.js &amp;&amp; vue-popper.js &amp;&amp; <code>utils/popup/popup-manager.js</code> &amp;&amp; <code>utils/popup/index.js</code></h3>',3),F={id:"popper-js-v1",tabindex:"-1"},q=n("a",{class:"header-anchor",href:"#popper-js-v1","aria-hidden":"true"},"#",-1),S={href:"https://github.com/floating-ui/floating-ui/tree/v1.x",target:"_blank",rel:"noopener noreferrer"},N=t(`<p>A popper is <strong>an element</strong> on the screen which &quot;pops out&quot; from the natural flow of your application. Common examples of poppers are tooltips, popovers, and drop-downs.</p><p>Popper.js is a positioning engine; its purpose is to calculate the position of an element to make it possible to position it near a given reference element.</p><h4 id="vue-popper-js" tabindex="-1"><a class="header-anchor" href="#vue-popper-js" aria-hidden="true">#</a> vue-popper.js</h4><p>vue integrate popper.js, export as vue mixins,used by ** color-picker,cascader,date-picker,dropdown,menu,popover,select,tooltip,table(filter-panel)** .etc positioning related components</p><h4 id="utils-popup-index-js" tabindex="-1"><a class="header-anchor" href="#utils-popup-index-js" aria-hidden="true">#</a> <code>utils/popup/index.js</code></h4><p>index.js 中<strong>默认</strong>导出了 popup mixin(整合了PopupManager), 它的作用是用来管理弹出框用的，在<strong>drawer,dialog,message-box</strong> 组件中均有应用;</p><p>此外还导出了 <code>PopupManager</code> 对象,在 <strong>loading,message,notification,table(filter-panel)</strong> 组件中均有应用，用于管理弹出层</p><h3 id="resize-event-js" tabindex="-1"><a class="header-anchor" href="#resize-event-js" aria-hidden="true">#</a> resize-event.js</h3><p>使用了 <code>resize-observer-polyfill</code> npm包来兼容 <code>ResizeObserver</code> 浏览器对象, 当被监听的 dom 元素 resize 事件触发的时候, 执行相应的 handler</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 使用</span>
<span class="token function">addResizeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span> <span class="token function">removeResizeListener</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleResize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scrollbar-width-js" tabindex="-1"><a class="header-anchor" href="#scrollbar-width-js" aria-hidden="true">#</a> scrollbar-width.js</h3><p>由于各个浏览器的滚动条宽度不一致，这个函数是用来获取当前浏览器滚动条宽度的，通过在 body 上创建一个不可见 div 元素，通过设置样式使其出现滚动条，计算滚动条宽度后移除该 div 元素,这个主要用于 element-ui 内置组件 <strong>scrollbar</strong> 中，它是一个模拟了横竖滚动条的容器组件</p><h3 id="scroll-into-view-js" tabindex="-1"><a class="header-anchor" href="#scroll-into-view-js" aria-hidden="true">#</a> scroll-into-view.js</h3><p>在 <strong>select,date-picker(time-select)</strong> 中有应用，当 select 组件展开的时候，选中项应该展示在可视区域中</p><p>获取选中子元素相对于 <strong>container</strong> 的所有 <strong>offsetParents</strong>，处于可视区域上半部分的，当前选中元素的 <strong>selected.offsetTop</strong> 值必然小于 <strong>container.scrollTop</strong>( offsetTop相对于父元素的左上角计算);处于可视区域下半部分的, 当前选中元素的 <strong>selected.offsetTop + selected.offsetHeight</strong> 值必然大于 <strong>container.scrollTop + container.clientHeight</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token parameter">container<span class="token punctuation">,</span> selected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$isServer<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>selected<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        container<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">const</span> offsetParents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> pointer <span class="token operator">=</span> selected<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
    <span class="token comment">// 获取 container 元素中某个子元素相对于 container 的所有 offsetParents</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>pointer <span class="token operator">&amp;&amp;</span> container <span class="token operator">!==</span> pointer <span class="token operator">&amp;&amp;</span> container<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        offsetParents<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        pointer <span class="token operator">=</span> pointer<span class="token punctuation">.</span>offsetParent<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 累加当前元素距离container元素的 top 值</span>
    <span class="token keyword">const</span> top <span class="token operator">=</span> selected<span class="token punctuation">.</span>offsetTop <span class="token operator">+</span> offsetParents<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span> curr</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>prev <span class="token operator">+</span> curr<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> bottom <span class="token operator">=</span> top <span class="token operator">+</span> selected<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">;</span>
    <span class="token keyword">const</span> viewRectTop <span class="token operator">=</span> container<span class="token punctuation">.</span>scrollTop<span class="token punctuation">;</span>
    <span class="token keyword">const</span> viewRectBottom <span class="token operator">=</span> viewRectTop <span class="token operator">+</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">&lt;</span> viewRectTop<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// seleted dom is hidden in upper scroll section</span>
        container<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> top<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bottom <span class="token operator">&gt;</span> viewRectBottom<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// seleted dom is hidden in bottom scroll section</span>
        container<span class="token punctuation">.</span>scrollTop <span class="token operator">=</span> bottom <span class="token operator">-</span> container<span class="token punctuation">.</span>clientHeight<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// do nothing cause seleted dom is in view</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="util-js-types-js" tabindex="-1"><a class="header-anchor" href="#util-js-types-js" aria-hidden="true">#</a> util.js &amp;&amp; types.js</h3>`,17);function P(H,V){const a=o("ExternalLinkIcon");return c(),i("div",null,[u,r,d,n("ul",null,[n("li",null,[n("a",k,[m,e(a)]),s(" 是只读属性，它返回一个值，代表用户按下并触发了事件的鼠标按键,0：主按键，通常指鼠标左键或默认值; 1：辅助按键，通常指鼠标滚轮中键; 2：次按键，通常指鼠标右键")])]),v,n("p",null,[n("a",h,[s("normalize-wheel"),e(a)]),s("Mouse wheel normalization across multiple multiple browsers. "),b,s(" was used to standardize the mousewheel event")]),f,n("p",null,[s("这是一个组件名为"),g,s("的函数式组件,它的 "),w,s(" 函数返回值得是一个 "),n("a",y,[x,e(a)]),s(" 组件，通过js操作子组件的 "),j,s(", 它会使得包裹其中的子组件呈现过渡展开的效果，在 "),_,s(" 中有所使用")]),z,n("p",null,[s("date.js is Modified from "),n("a",E,[s("fecha"),e(a)]),s(" which is a Lightweight date formatting and parsing utils(~2KB) and Meant to replace parsing and formatting functionality of "),C]),L,n("p",null,[s("interesting Question: "),n("a",M,[s("Incrementing a date in JavaScript"),e(a)])]),T,n("h4",F,[q,s(),n("a",S,[s("Popper.js V1"),e(a)])]),N])}const R=p(l,[["render",P],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/element-ui/element_utils.html.vue"]]);export{R as default};
