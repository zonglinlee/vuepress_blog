import{_ as o,r as t,o as r,c as i,a as e,b as a,d as s,e as l}from"./app-4d1d3ef4.js";const c={},d=l(`<h2 id="拼接字符串" tabindex="-1"><a class="header-anchor" href="#拼接字符串" aria-hidden="true">#</a> 拼接字符串</h2><p>shell字符串可以用单引号，也可以用双引号，也可以不用引号。双引号的优点：<code>双引号里可以有变量，双引号里可以出现转义字符</code></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">your_name</span><span class="token operator">=</span><span class="token string">&quot;runoob&quot;</span>
<span class="token comment"># 使用双引号拼接</span>
<span class="token assign-left variable">greeting</span><span class="token operator">=</span><span class="token string">&quot;hello, &quot;</span><span class="token variable">$your_name</span><span class="token string">&quot; !&quot;</span>
<span class="token assign-left variable">greeting_1</span><span class="token operator">=</span><span class="token string">&quot;hello, <span class="token variable">\${your_name}</span> !&quot;</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$greeting</span>  <span class="token variable">$greeting_1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="shell数组" tabindex="-1"><a class="header-anchor" href="#shell数组" aria-hidden="true">#</a> shell数组</h2><ul><li>在 Shell 中，用<code>括号</code>来表示数组，数组元素用<code>空格</code>符号分割开,例如<code>array_name=(value0 value1 value2 value3)</code>,<code>Bash Shell</code> 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小</li><li>读取数组元素值的一般格式是：<code>\${数组名[下标]}</code></li><li>使用 @ 符号可以获取数组中的所有元素,如 <code>echo \${array_name[@]}</code></li><li>在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<code>$n</code>。n 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推</li><li>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk 和 expr</code>，<code>expr</code> 最常用,<code>表达式和运算符之间要有空格</code>，例如 <code>2+2</code> 是不对的，必须写成 <code>2 + 2</code>。完整的表达式要被 <code>backtic</code>包括</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token shebang important">#!/bin/bash</span>
<span class="token assign-left variable">val</span><span class="token operator">=</span><span class="token variable"><span class="token variable">\`</span><span class="token function">expr</span> <span class="token number">2</span> + <span class="token number">2</span><span class="token variable">\`</span></span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;两数之和为 : <span class="token variable">$val</span>&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>$?</code> return value of the last executed command.</li></ul>`,7),h={id:"shell变量",tabindex:"-1"},u=e("a",{class:"header-anchor",href:"#shell变量","aria-hidden":"true"},"#",-1),p={href:"https://www.runoob.com/linux/linux-shell-variable.html",target:"_blank",rel:"noopener noreferrer"},b=e("ul",null,[e("li",null,[a("定义变量时，变量名不加美元符号 "),e("code",null,'your_name="runoob.com"'),a(", "),e("strong",null,"变量名和等号之间不能有空格")]),e("li",null,[a("使用一个定义过的变量，只要在变量名前面加美元符号即可 "),e("code",null,"echo $your_name"),a(" 或者 "),e("code",null,"echo ${your_name}"),a("，变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界")])],-1),_={id:"shell字符串",tabindex:"-1"},m=e("a",{class:"header-anchor",href:"#shell字符串","aria-hidden":"true"},"#",-1),v={href:"https://www.runoob.com/linux/linux-shell-variable.html",target:"_blank",rel:"noopener noreferrer"},k=l('<ul><li>字符串是shell编程中最常用最有用的数据类型，字符串可以用<code>单引号</code>，也可以用<code>双引号</code>，也可以<code>不用引号</code>。</li><li>单引号字符串的限制： <ul><li>单引号里的任何字符都会原样输出，单引号字符串中的 <strong>变量</strong> 是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul></li><li>双引号的优点： <ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></li></ul><h3 id="参考链接" tabindex="-1"><a class="header-anchor" href="#参考链接" aria-hidden="true">#</a> 参考链接</h3>',2),g={href:"https://wiki.jikexueyuan.com/project/shell-tutorial/shell-special-variable.html",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,"https://man.linuxde.net/ https://github.com/nodesource/distributions/blob/master/README.md#deb",-1),x=e("h3",{id:"定时任务",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#定时任务","aria-hidden":"true"},"#"),a(" 定时任务")],-1),w={href:"https://www.yiibai.com/linux/crontab.html",target:"_blank",rel:"noopener noreferrer"},y={href:"https://www.yiibai.com/linux/at.html",target:"_blank",rel:"noopener noreferrer"},$={id:"ubuntu-apt-get命令-阿里云镜像更换",tabindex:"-1"},q=e("a",{class:"header-anchor",href:"#ubuntu-apt-get命令-阿里云镜像更换","aria-hidden":"true"},"#",-1),S={href:"https://developer.aliyun.com/article/704603",target:"_blank",rel:"noopener noreferrer"},j={id:"jdk安装",tabindex:"-1"},E=e("a",{class:"header-anchor",href:"#jdk安装","aria-hidden":"true"},"#",-1),B={href:"https://www.huaweicloud.com/articles/3c4a009f8f0be4ecc9199045bc151f83.html",target:"_blank",rel:"noopener noreferrer"};function N(V,I){const n=t("ExternalLinkIcon");return r(),i("div",null,[d,e("h3",h,[u,a(),e("a",p,[a("shell变量"),s(n)])]),b,e("h3",_,[m,a(),e("a",v,[a("shell字符串"),s(n)])]),k,e("ul",null,[e("li",null,[e("a",g,[a("shell特殊变量"),s(n)])])]),f,x,e("ul",null,[e("li",null,[e("a",w,[a("crontab"),s(n)])]),e("li",null,[e("a",y,[a("一次性定时任务at"),s(n)])])]),e("h3",$,[q,a(),e("a",S,[a("ubuntu apt-get命令 阿里云镜像更换"),s(n)])]),e("h3",j,[E,a(),e("a",B,[a("jdk安装"),s(n)])])])}const A=o(c,[["render",N],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/others/linuxShell.html.vue"]]);export{A as default};
