import{_ as t,r as p,o as e,c as o,a as n,b as s,d as c,e as l}from"./app-4d1d3ef4.js";const i={},u={id:"js-模板引擎",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#js-模板引擎","aria-hidden":"true"},"#",-1),k={href:"https://krasimirtsonev.com/blog/article/Javascript-template-engine-in-just-20-line",target:"_blank",rel:"noopener noreferrer"},d=l(`<p>构造函数字符串，利用js <code>new Function</code> 将字符串转成函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">TemplateEngine</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">tpl<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">&lt;%([^%&lt;&gt;]+)%&gt;</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> regKeyWord <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s*(for|if|switch|case|break|else|else\\s+if|})\\s*{?</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span>
    <span class="token keyword">let</span> codeBody <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">let arr=[];\\n</span><span class="token template-punctuation string">\`</span></span>
    <span class="token keyword">let</span> match<span class="token punctuation">;</span>
    <span class="token keyword">let</span> cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">addNewFunctionBody</span><span class="token punctuation">(</span><span class="token parameter">line<span class="token punctuation">,</span> js</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        js <span class="token operator">?</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>regKeyWord<span class="token punctuation">)</span> <span class="token operator">?</span> codeBody <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>line<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">\\n</span><span class="token template-punctuation string">\`</span></span> <span class="token operator">:</span> codeBody <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">arr.push(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>line<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">);\\n</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span> <span class="token operator">:</span>
            codeBody <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">arr.push(&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>line<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;);\\n</span><span class="token template-punctuation string">\`</span></span>
    <span class="token punctuation">}</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>match <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>tpl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// console.log(&quot;match::&quot;, match)</span>
        <span class="token function">addNewFunctionBody</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>cursor<span class="token punctuation">,</span> match<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>
        cursor <span class="token operator">=</span> match<span class="token punctuation">.</span>index <span class="token operator">+</span> match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length
        <span class="token comment">// console.log(cursor)</span>
        <span class="token keyword">const</span> matchPart <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token function">addNewFunctionBody</span><span class="token punctuation">(</span>matchPart<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">addNewFunctionBody</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>cursor<span class="token punctuation">)</span><span class="token punctuation">)</span>
    codeBody <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">return arr.join(&#39;&#39;);</span><span class="token template-punctuation string">\`</span></span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;========================codeBody======================\\n&#39;</span><span class="token punctuation">,</span> codeBody<span class="token punctuation">)</span>
    <span class="token keyword">const</span> myFun <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span>codeBody<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">myFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\s{4}</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> template <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, my name is &lt;%this.name%&gt;.I 
                    am &lt;%this.profile.age%&gt; years old.
                    My skills:&lt;%for(var index in this.skills) {%&gt;&lt;%this.skills[index]%&gt;&lt;%}%&gt;</span><span class="token template-punctuation string">\`</span></span>

<span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;lee&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">profile</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">55</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">skills</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;js,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;html,&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;css&quot;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">TemplateEngine</span><span class="token punctuation">(</span>template<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function m(g,v){const a=p("ExternalLinkIcon");return e(),o("div",null,[n("h2",u,[r,s(),n("a",k,[s("JS 模板引擎"),c(a)])]),d])}const y=t(i,[["render",m],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/js_practice/jsTemplateEngine.html.vue"]]);export{y as default};
