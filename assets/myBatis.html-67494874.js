import{_ as p,r as o,o as l,c,a,b as s,d as e,e as t}from"./app-4d1d3ef4.js";const i={},r=t(`<p>Every MyBatis application centers around an instance of SqlSessionFactory. A SqlSessionFactory instance can be acquired by using the SqlSessionFactoryBuilder. SqlSessionFactoryBuilder can build a SqlSessionFactory instance from an XML configuration file, or from a custom prepared instance of the Configuration class.</p><p>SqlSession: The primary Java interface for working with MyBatis. Through this interface you can execute commands, get mappers and manage transactions. SqlSessionFactory: Creates an SqlSession out of a connection or a DataSource</p><h2 id="spring-mybatis-mysql-连接池" tabindex="-1"><a class="header-anchor" href="#spring-mybatis-mysql-连接池" aria-hidden="true">#</a> spring + mybatis + mysql + 连接池</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- MyBatis SQL mapper framework --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mybatis.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- An easy-to-use Spring bridge for MyBatis sql mapping framework --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mybatis-spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- JDBC connection pool --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.zaxxer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>HikariCP<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${hikaricp.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- mysql  数据库驱动 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${mysql.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解" aria-hidden="true">#</a> 注解</h2><h3 id="from-mybatis" tabindex="-1"><a class="header-anchor" href="#from-mybatis" aria-hidden="true">#</a> from myBatis</h3><ul><li>@Mapper: Marker interface for MyBatis mappers, 添加@Mapper注解之后这个接口在编译时会生成相应的实现类</li></ul><h3 id="from-springboot" tabindex="-1"><a class="header-anchor" href="#from-springboot" aria-hidden="true">#</a> from springBoot</h3><ul><li>@MapperScan： 直接在Mapper类上面添加注解@Mapper，这种方式要求每一个mapper类都需要添加此注解，太麻烦。 通过使用@MapperScan可以指定要扫描的Mapper类的包的路径</li></ul><h3 id="from-mybatisplus" tabindex="-1"><a class="header-anchor" href="#from-mybatisplus" aria-hidden="true">#</a> from myBatisPlus</h3><ul><li>@TableName: 表名注解，标识实体类对应的表, 在实体类上使用</li><li>@TableId： 主键注解，在实体类主键字段上使用</li><li>@TableField：字段注解（非主键），如果实体类字段和数据库字段不一致，可以用这个做转换</li></ul><h2 id="接口和类" tabindex="-1"><a class="header-anchor" href="#接口和类" aria-hidden="true">#</a> 接口和类</h2><h3 id="from-mybatisplus-1" tabindex="-1"><a class="header-anchor" href="#from-mybatisplus-1" aria-hidden="true">#</a> from myBatisPlus</h3><ul><li><code>BaseMapper</code>: Mapper 继承该接口后，无需编写 mapper.xml 文件，即可获得CRUD功能</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><code>IService</code>: 顶级 Service, 它的实现类是 <code>ServiceImpl</code>,通过继承该类可以获得 CRUD 功能，在项目中如下使用</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 接口继承</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token keyword">extends</span> <span class="token class-name">IService</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> 
<span class="token comment">// 实现类继承</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceImpl</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">UserMapper</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),u=a("li",null,[a("p",null,[a("code",null,"AbstractWrapper"),s(":sql条件构造器，QueryWrapper(LambdaQueryWrapper) 和 UpdateWrapper(LambdaUpdateWrapper) 的父类 ,用于生成 sql 的 where 条件")])],-1),d={href:"https://blog.csdn.net/pingfandehaozai/article/details/103537250",target:"_blank",rel:"noopener noreferrer"},k=a("li",null,[a("p",null,[a("code",null,"IPage 接口"),s(": 它的简单实现类是 "),a("code",null,"Page")])],-1),m=t(`<h2 id="mybatis-主键" tabindex="-1"><a class="header-anchor" href="#mybatis-主键" aria-hidden="true">#</a> myBatis 主键</h2><p>@SelectKey 应用场景： 如果向数据库中插入一条数据，同时有希望返回该条记录的主键，该怎么处理了？有两种情况：</p><ul><li>（1）数据库主键不是自增列，需要预先生成</li><li>（2）是自增列，插入之后才能获知</li></ul><p>这两种情况都可以通过SelectKey解决，第一个种就是before，第二张是after。</p><p>@SelectKey的属性有下面几个：</p><ul><li>statement属性：填入将会被执行的 SQL 字符串数组。</li><li>keyProperty属性：填入将会被更新的参数对象的属性的值。</li><li>before属性：填入 true 或 false 以指明 SQL 语句应被在插入语句的之前还是之后执行。</li><li>resultType属性：填入 keyProperty 的 Java 类型。</li><li>statementType属性：填入Statement、 PreparedStatement 和 CallableStatement 中的STATEMENT、 PREPARED 或 CALLABLE 中任一值填入 。默认值是 PREPARED</li></ul><p>如下所示插入主键 id 为 UUID， 其中 <code>select replace(uuid(), &#39;-&#39;, &#39;&#39;)</code> 中的 <code>uuid()</code> 和 <code>replace()</code> 函数均为 mysql 自带的字符串处理函数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@SelectKey</span><span class="token punctuation">(</span>statement <span class="token operator">=</span> <span class="token string">&quot;select replace(uuid(), &#39;-&#39;, &#39;&#39;)&quot;</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">&quot;user.id&quot;</span><span class="token punctuation">,</span> before <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> resultType <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Options</span><span class="token punctuation">(</span>useGeneratedKeys <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> keyProperty <span class="token operator">=</span> <span class="token string">&quot;user.id&quot;</span><span class="token punctuation">,</span> keyColumn <span class="token operator">=</span> <span class="token string">&quot;user.id&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">&quot;INSERT INTO users (id, email, password, name, createdAt) VALUES (#{user.id}, #{user.email}, #{user.password}, #{user.name}, #{user.createdAt})&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">boolean</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="mybatis-日志" tabindex="-1"><a class="header-anchor" href="#mybatis-日志" aria-hidden="true">#</a> myBatis 日志</h2><p>某些查询可能会返回庞大的结果集，此时只想记录其执行的 SQL 语句而不想记录结果该怎么办？为此，Mybatis 中 SQL 语句的日志级别被设为DEBUG（JDK 日志设为 FINE），结果的日志级别为 TRACE（JDK 日志设为 FINER)。所以，只要将日志级别调整为 DEBUG 即可达到目的。</p><p>如果项目使用的是 logback 作为日志，则在 logback.xml 文件中调整日志输出级别，达到 mybatis 日志输出级别就可以输出日志了。</p><h2 id="mybatis-批处理" tabindex="-1"><a class="header-anchor" href="#mybatis-批处理" aria-hidden="true">#</a> myBatis 批处理</h2>`,12),g={href:"https://juejin.cn/post/6844903991147495437",target:"_blank",rel:"noopener noreferrer"},h={id:"mybatis中模糊查询like的三种方式",tabindex:"-1"},b=a("a",{class:"header-anchor",href:"#mybatis中模糊查询like的三种方式","aria-hidden":"true"},"#",-1),v={href:"https://blog.csdn.net/wrs120/article/details/82530653",target:"_blank",rel:"noopener noreferrer"},y={id:"mybatis一对多查询",tabindex:"-1"},f=a("a",{class:"header-anchor",href:"#mybatis一对多查询","aria-hidden":"true"},"#",-1),_={href:"https://blog.csdn.net/shuai8624/article/details/116563491",target:"_blank",rel:"noopener noreferrer"},S={id:"mybatis-plus分页查询三种方法",tabindex:"-1"},x=a("a",{class:"header-anchor",href:"#mybatis-plus分页查询三种方法","aria-hidden":"true"},"#",-1),q={href:"https://blog.csdn.net/weixin_46146718/article/details/126962110",target:"_blank",rel:"noopener noreferrer"},I={id:"mybatis-plus-查询传入参数map-返回list-map",tabindex:"-1"},B=a("a",{class:"header-anchor",href:"#mybatis-plus-查询传入参数map-返回list-map","aria-hidden":"true"},"#",-1),M={href:"https://blog.csdn.net/yfx000/article/details/108222312",target:"_blank",rel:"noopener noreferrer"},w={id:"mybatis中-mapkey使用详解",tabindex:"-1"},E=a("a",{class:"header-anchor",href:"#mybatis中-mapkey使用详解","aria-hidden":"true"},"#",-1),U={href:"https://blog.csdn.net/u012734441/article/details/85861337",target:"_blank",rel:"noopener noreferrer"},T=a("h2",{id:"reference",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#reference","aria-hidden":"true"},"#"),s(" reference")],-1),L={href:"https://mybatis.org/mybatis-3/",target:"_blank",rel:"noopener noreferrer"},P={href:"https://blog.csdn.net/qq_19387933/article/details/123256034",target:"_blank",rel:"noopener noreferrer"},j={href:"https://baomidou.com/pages/24112f/",target:"_blank",rel:"noopener noreferrer"};function D(A,C){const n=o("ExternalLinkIcon");return l(),c("div",null,[r,a("ul",null,[u,a("li",null,[a("p",null,[a("a",d,[s("BaseMapper和IService的区别"),e(n)]),s(":BaseMapper 针对dao层的方法封装 CRUD IService<M,T> 针对业务逻辑层的封装 需要指定Dao层类和对应的实体类 是在BaseMapper基础上的加强")])]),k]),m,a("ul",null,[a("li",null,[a("a",g,[s("基于SqlSession的ExecutorType进行批量操作"),e(n)])])]),a("h2",h,[b,s(),a("a",v,[s("MyBatis中模糊查询LIKE的三种方式"),e(n)])]),a("h2",y,[f,s(),a("a",_,[s("Mybatis一对多查询"),e(n)])]),a("h2",S,[x,s(),a("a",q,[s("mybatis-plus分页查询三种方法"),e(n)])]),a("h2",I,[B,s(),a("a",M,[s("mybatis-plus 查询传入参数Map，返回List＜Map＞"),e(n)])]),a("h2",w,[E,s(),a("a",U,[s("MyBatis中@MapKey使用详解"),e(n)])]),T,a("ul",null,[a("li",null,[a("a",L,[s("myBatis"),e(n)])]),a("li",null,[a("a",P,[s("MyBatis笔记"),e(n)])]),a("li",null,[a("a",j,[s("myBatisPlus"),e(n)])])])])}const R=p(i,[["render",D],["__file","/home/runner/work/vuepress_blog/vuepress_blog/docs/.vuepress/.temp/pages/java/myBatis.html.vue"]]);export{R as default};
